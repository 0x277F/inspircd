#!/bin/sh
# InspIRCd Configuration Script
#
# Copyright 2003 The ChatSpike Development Team
# <brain@chatspike.net>
# <Craig@chatspike.net>
#
# $Id$
#
#
########################################

echo "Configuring default values..."

ME=`pwd`
GCCVER=`gcc -dumpversion | cut -c 1`
GCC34=`gcc -dumpversion | cut -c 3`
CONFIG_DIR=$ME/conf
MODULE_DIR=$ME/modules
BINARY_DIR=$ME/bin
INSTALL=`which install`
OPTIMITEMP=0
OPTIMISATI="-g"
MAX_CLIENT_T=`ulimit -n`
NICK_LENGT=32
CHAN_LENGT=64
MAX_CHANNE=20
MAXI_MODES=20
HAS_STRLCPY=0
OSNAME=`(uname -s) 2>/dev/null` || OSNAME="unknown"

if [ -z $MAX_CLIENT_T ] ; then
        MAX_CLIENT_T=1024
        SCAN_FAILED=1
fi


if [ "$1" = "-clean" -o "$2" = "-clean" ] ; then
  `rm -rf .config.cache`
fi

if [ -e ".config.cache" -a -z "$CLEAN" ] ; then
    . .config.cache 
fi

if [ "$1" = "-update" -o "$2" = "-update" ] ; then
   # They wanna update their Makefile.. good for 'em
   # Make sure .config.cache exists
   if [ ! -e ".config.cache" ] ; then
     echo "You have not run ./configure before. Please do this before trying to run the update script."
     exit 0
   fi
   # Right, load the cache values
   . .config.cache
   # Check for modules

   case "$OSNAME" in
           FreeBSD)
                   LDLIBS="-Ldl"
                   FLAGS="-fPIC -frtti $OPTIMISATI -Wcomment -Wformat -Wunused -Wshadow -Werror"
                   MAKEPROG="gmake"
                   ;;
           *)
                   LDLIBS="-ldl"
                   FLAGS="-fPIC -frtti $OPTIMISATI -Wcomment -Wformat -Wunused -Wshadow -Werror"
                   MAKEPROG="make"
                   ;;
   esac

   MODULES=""
   for module in src/modules/*.cpp ; do
           mod=`echo $module | sed 's/.cpp/.so/' | sed 's/src\/modules\///'`
           MODULES="$MODULES $mod"
   done

   # Write the new makefile.
   for file in Makefile; do
          echo -e "\033[0mWriting \033[1;32m$file\033[0m"
          rm -f $file
          sed -e "
                  s%@MAKEPROG@%$MAKEPROG%g
                  s%@FLAGS@%$FLAGS%g
                  s%@LDLIBS@%$LDLIBS%g
                  s%@CONFIG_DIR@%$CONFIG_DIR%g
                  s%@MODULE_DIR@%$MODULE_DIR%g
                  s%@BINARY_DIR@%$BINARY_DIR%g
                  s%@MODULES@%$MODULES%g
          " .${file}.inc >> $file
   done
   echo -e "\033[0mWriting \033[1;32msrc/modules/Makefile\033[0m"
   rm -f src/modules/Makefile

   # Generate the Header..

   echo "# (C) ChatSpike development team" >> src/modules/Makefile
   echo "# Makefile by <Craig@ChatSpike.net>" >> src/modules/Makefile
   echo "# Many Thanks to Andrew Church <achurch@achurch.org>" >> src/modules/Makefile
   echo "#    for assisting with making this work right." >> src/modules/Makefile
   echo "#" >> src/modules/Makefile
   echo "# Automatically Generated by ./configure to add a module" >> src/modules/Makefile
   echo "# please run ./configure --update" >> src/modules/Makefile
   echo "" >> src/modules/Makefile
   echo "all: \$(MODULES)" >> src/modules/Makefile
   echo "" >> src/modules/Makefile


   for module in src/modules/*.cpp ; do
        flags=`grep '$CompileFlags: ' $module | sed 's/\/\* $CompileFlags://' | sed 's/\*\///'`
        mod=`echo $module | sed 's/.cpp/.so/' | sed 's/src\/modules\///'`
	mod2=`echo $module | sed 's/src\/modules\///'`
        echo "$mod: $mod2 ../../include/modules.h ../../include/users.h ../../include/channels.h ../../include/servers.h ../../include/base.h" >> src/modules/Makefile
        echo "	\$(CC) -I../../include \$(FLAGS) -shared$flags -o $mod $mod2" >> src/modules/Makefile
	echo "	@cp $mod \$(MODPATH)/" >> src/modules/Makefile
        echo "" >> src/modules/Makefile
   done


   echo "Complete."
   exit 1; 
fi


if [ -z $MAX_CLIENT ] ; then
        MAX_CLIENT=$MAX_CLIENT_T
fi


c=""
n=""
if [ "`eval echo -e -n 'a'`" = "-n a" ] ; then
        c="\c"
else
        n="-n"
fi

exists () { # because some shells don't have test -e
    if [ -f $1 -o -d $1 -o -p $1 -o -c $1 -o -b $1 ] ; then
	return 0
    else
	return 1
    fi
}

echo "#include <string.h>">.test.cpp
echo "#include <stdio.h>">>.test.cpp
echo "int main() { char a[10]; char b[10]; strlcpy(a,b,10); printf(\"%d\\n\",9); }" >>.test.cpp
g++ -o .test .test.cpp 2>&1
if [ -e ".test" ] ; then
	HAS_STRLCPY=1
fi 
rm -f .test.cpp .test

clear
echo -e "'\033[1;33m####\033[0m:'\033[1;33m##\033[0m::: \033[1;33m##\033[0m::'\033[1;33m######\033[0m::'\033[1;33m########\033[0m::'\033[1;33m####\033[0m:'\033[1;33m########\033[0m:::'\033[1;33m######\033[0m::'\033[1;33m########\033[0m::"
echo -e ". \033[1;33m##\033[0m:: \033[1;33m###\033[0m:: \033[1;33m##\033[0m:'\033[1;33m##\033[0m... \033[1;33m##\033[0m: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:. \033[1;33m##\033[0m:: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:'\033[1;33m##\033[0m... \033[1;33m##\033[0m: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:"
echo -e ": \033[1;33m##\033[0m:: \033[1;33m####\033[0m: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::..:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::..:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:"
echo -e ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m \033[1;33m##\033[0m \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m########\033[0m::: \033[1;33m##\033[0m:: \033[1;33m########\033[0m:: \033[1;33m##\033[0m::::::: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:"
echo -e ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m. \033[1;33m####\033[0m::..... \033[1;33m##\033[0m: \033[1;33m##\033[0m.....:::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m.. \033[1;33m##\033[0m::: \033[1;33m##\033[0m::::::: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:"
echo -e ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m:. \033[1;33m###\033[0m:'\033[1;33m##\033[0m::: \033[1;33m##\033[0m: \033[1;33m##\033[0m::::::::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m::. \033[1;33m##\033[0m:: \033[1;33m##\033[0m::: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:"
echo -e "'\033[1;33m####\033[0m: \033[1;33m##\033[0m::. \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m##\033[0m::::::::'\033[1;33m####\033[0m: \033[1;33m##\033[0m:::. \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m########\033[0m::"
echo -e "\033[0m\033[0m....::..::::..:::......:::..:::::::::....::..:::::..:::......:::........:::"
echo ""
echo "Welcome to the InspIRCd Configuration program!"
echo ""
echo "*** If you are unsure of any of these values, leave it blank for    ***"
echo "*** standard settings that will work, and your server will run      ***"
echo "*** using them. If you are running this server as part of a         ***"
echo "*** larger network, you must consult with your network admins       ***"
echo "*** for the proper values to use, or server links will be unstable! ***"
echo ""
echo -e "Press \033[1m<RETURN>\033[0m to accept the default for any option, or enter"
echo -e "a new value. Please note: You will \033[1mHAVE\033[0m to read the docs"
echo -e "dir, otherwise you won't have a config file!"
echo ""
echo -e "Your operating system is: \033[1;32m$OSNAME\033[0m (`uname -mnr`), fdmax: $MAX_CLIENT_T"
echo ""

#############################################################################

    ok=0
    asked=1
    echo "In what directory are the configuration files?"
    while [ $ok -eq 0 ] ; do
	echo -e $n "[\033[1;32m$CONFIG_DIR\033[0m] -> $c"
	if read INPUT ; then : ; else echo "" ; exit 1 ; fi
	if [ ! "$INPUT" ] ; then
	    INPUT=$CONFIG_DIR
	    default=1
	fi
	if echo "$INPUT" | grep -q \[\'\"\\\] ; then
	    echo 'Please use a pathname without the characters: '\'' " \'
	elif [ ! "$NO_DIR_CHECK" -a ! -d "$INPUT" ] ; then
	    if exists "$INPUT" ; then
		echo "$INPUT exists, but is not a directory!"
	    else
		echo "$INPUT does not exist.  Create it?"
		echo -e $n "[\033[1;32my\033[0m] $c"
		read YN
		if [ "$YN" != "n" ] ; then
		    if mkdir -p "$INPUT" ; then
			ok=1
		    fi
		fi
	    fi
	    else
            ok=1
	fi
    done
    CONFIG_DIR=$INPUT
    echo ""


##############################################################################

    ok=0
    asked=1
    echo "In What directory are the modules to be compiled to?"
    while [ $ok -eq 0 ] ; do
        echo -e $n "[\033[1;32m$MODULE_DIR\033[0m] -> $c"
        if read INPUT ; then : ; else echo "" ; exit 1 ; fi
        if [ ! "$INPUT" ] ; then
            INPUT=$MODULE_DIR
            default=1
        fi
        if echo "$INPUT" | grep -q \[\'\"\\\] ; then
            echo 'Please use a pathname without the characters: '\'' " \'
        elif [ ! "$NO_DIR_CHECK" -a ! -d "$INPUT" ] ; then
            if exists "$INPUT" ; then
                echo "$INPUT exists, but is not a directory!"
            else
                echo "$INPUT does not exist.  Create it?"
                echo -e $n "[\033[1;32my\033[0m] $c"
                read YN
                if [ "$YN" != "n" ] ; then
                    if mkdir -p "$INPUT" ; then
                        ok=1
                    fi
                fi
            fi
            else
            ok=1
        fi
    done
    MODULE_DIR=$INPUT
    echo ""


##############################################################################

    ok=0
    asked=1
    echo "In what directory is the IRCd binary to be placed?"
    while [ $ok -eq 0 ] ; do
        echo -e $n "[\033[1;32m$BINARY_DIR\033[0m] -> $c"
        if read INPUT ; then : ; else echo "" ; exit 1 ; fi
        if [ ! "$INPUT" ] ; then
            INPUT=$BINARY_DIR
            default=1
        fi
        if echo "$INPUT" | grep -q \[\'\"\\\] ; then
            echo 'Please use a pathname without the characters: '\'' " \'
        elif [ ! "$NO_DIR_CHECK" -a ! -d "$INPUT" ] ; then
            if exists "$INPUT" ; then
                echo "$INPUT exists, but is not a directory!"
            else
                echo "$INPUT does not exist.  Create it?"
                echo -e $n "[\033[1;32my\033[0m] $c"
                read YN
                if [ "$YN" != "n" ] ; then
                    if mkdir -p "$INPUT" ; then
                        ok=1
                    fi
                fi
            fi
            else
            ok=1
        fi
    done
    BINARY_DIR=$INPUT
    echo ""

###############################################################################
# Craigs Version 3 With slightly less Cheeze :p

cheeze=0
echo -e "Maximum number of clients at any one time (\033[1;32m1-$MAX_CLIENT_T\033[0m)?"
while [ "$cheeze" -eq "0" ] ; do
	echo -e $n "[\033[1;32m$MAX_CLIENT\033[0m] -> $c"
        read cc

        if [ -z "$cc" ] ; then
		cc=$MAX_CLIENT
	fi

	case "$cc" in 
		[0-9]*)
			if [ "$cc" -gt "$MAX_CLIENT_T" -a -z "$SCAN_FAILED" ] ; then
				echo -e "WARNING: Our scans have indicated that you are attempting"
				echo -e "to use more sockets than there are avaliable. Are you sure"
				echo -e "you wish to do this? It may cause the IRCd to malfunction [y/n]"
				echo -e $n "[\033[1;32mn\033[0m] -> $c"
				read YN
				if [ "$YN" = "y" ] ; then
					MAX_CLIENT=$cc
					cheeze=1
				else
					echo ""
					echo -e "Please enter the correct value (\033[1;32m1-$MAX_CLIENT_T\033[0m)"
				fi
			else
				echo $SCAN_FAILED
				cheeze=1
				MAX_CLIENT=$cc
			fi
			;;
		*)
			echo ""
			echo "You must enter a number in this field. Please try again."
			;;
	esac
done
echo ""


###############################################################################

  cheeze=0
  echo -e "What is the Maximum length of nicknames?"
  while [ "$cheeze" -eq "0" ] ; do
        echo -e $n "[\033[1;32m$NICK_LENGT\033[0m] -> $c"
        read cc
        if [ "$cc" ] ; then
                case "$cc" in
                        [0-9]*)
                        NICK_LENGT=$cc
                        cheeze=1
                        ;;
                        *)
                        echo ""
                        echo "You Must Enter a Number in this field. Please Try Again."
                        cheeze=0
                        ;;
                esac
        else
                cheeze=1
        fi
  done
  echo ""

###############################################################################

  cheeze=0
  echo -e "What is the Maximum length of channel names?"
  while [ "$cheeze" -eq "0" ] ; do
        echo -e $n "[\033[1;32m$MAX_CHANNE\033[0m] -> $c"
        read cc
        if [ "$cc" ] ; then
                case "$cc" in
                        [0-9]*)
                        MAX_CHANNE=$cc
                        cheeze=1
                        ;;
                        *)
                        echo ""
                        echo "You Must Enter a Number in this field. Please Try Again."
                        cheeze=0
                        ;;
                esac
        else
                cheeze=1
        fi
  done
  echo ""

###############################################################################

  cheeze=0
  echo -e "What is the Maximum number of mode changes in one line?"
  while [ "$cheeze" -eq "0" ] ; do
        echo -e $n "[\033[1;32m$MAXI_MODES\033[0m] -> $c"
        read cc
        if [ "$cc" ] ; then
                case "$cc" in
                        [0-9]*)
                        MAXI_MODES=$cc
                        cheeze=1
                        ;;
                        *)
                        echo ""
                        echo "You Must Enter a Number in this field. Please Try Again."
                        cheeze=0
                        ;;
                esac
        else
                cheeze=1
        fi
  done
  echo ""

###############################################################################
# Code Optimisation?

  cheeze=0
  echo -e "Enter the Level Of Binary optimisation. This is a number between 0 and 3 (inclusive)"
  echo -e "The InspIRCd Team will _NOT_ support any bug reports above 0."
  echo -e "Also note, the IRCd behaviour will be different depending on this value."
  echo -e "Please read the documentation for more information."
  echo -e ""
  echo -e "The Higher the number, the more optimised your binary will be. This value will default to 0"
  echo -e "If you either a) Dont enter a number, or b) Enter a value outside the range."
  echo -e $n "[\033[1;32m$OPTIMITEMP\033[0m] -> $c"
  read cc
  if [ -z "$cc" ] ; then
	cc=$OPTIMITEMP
  fi
  case "$cc" in
        1)
                OPTIMITEMP=1
		OPTIMISATI="-O"
                ;;
	2)
		OPTIMITEMP=2
		OPTIMISATI="-O2"
		;;
	3)
		OPTIMITEMP=3
		OPTIMISATI="-O3"
		;;
	*)
                OPTIMITEMP=0
                OPTIMISATI="-g"
                ;;
  esac
  echo ""

###############################################################################


echo -e "\033[1;32mPre-build configuration is complete!\033[0m"
echo ""
echo -e "\033[0mConfig path:\033[1;32m\t\t\t$CONFIG_DIR"
echo -e "\033[0mModule path:\033[1;32m\t\t\t$MODULE_DIR"
echo -e "\033[0mMax connections:\033[1;32m\t\t$MAX_CLIENT"
echo -e "\033[0mMax User Channels\033[1;32m\t\t$MAX_CHANNE"
echo -e "\033[0mMax nickname length:\033[1;32m\t\t$NICK_LENGT"
echo -e "\033[0mMax channel length:\033[1;32m\t\t$CHAN_LENGT"
echo -e "\033[0mMax mode length:\033[1;32m\t\t$MAXI_MODES"
echo -e "\033[0mGCC Version Found:\033[1;32m\t\t$GCCVER.$GCC34"
echo -e "\033[0mOptimatizaton Flag:\033[1;32m\t\t$OPTIMISATI"
echo -e "\033[0m"

echo "Writing cache file for future ./configures ..."

COPY_CONF=0
if [ "$CONFIG_DIR" != "$ME/conf" ] ; then
    COPY_CONF=1
fi


if [ -e ".config.cache" ] ; then
	rm .config.cache
fi
echo "CONFIG_DIR=\"$CONFIG_DIR\"" >> .config.cache
echo "MODULE_DIR=\"$MODULE_DIR\"" >> .config.cache
echo "BINARY_DIR=\"$BINARY_DIR\"" >> .config.cache
echo "MAX_CLIENT=\"$MAX_CLIENT\"" >> .config.cache
echo "MAX_CHANNE=\"$MAX_CHANNE\"" >> .config.cache
echo "NICK_LENGT=\"$NICK_LENGT\"" >> .config.cache
echo "MAXI_MODES=\"$MAXI_MODES\"" >> .config.cache 
echo "OPTIMITEMP=\"$OPTIMITEMP\"" >> .config.cache
echo "OPTIMISATI=\"$OPTIMISATI\"" >> .config.cache
echo "GCC34=\"$GCC34\"" >> .config.cache
echo "HAS_STRLCPY=\"$HAS_STRLCPY\"" >> .config.cache
echo "COPY_CONF=\"$COPY_CONF\"" >> .config.cache

echo -e "Writing \033[1;32minspircd_config.h"

echo "/* Auto generated by configure, do not modify! */" >include/inspircd_config.h
echo "" >>include/inspircd_config.h
if [ "$GCCVER" -eq "3" ] ; then
echo "#define GCC3" >>include/inspircd_config.h
	if [ "$GCC34" -gt "3" ] ; then
		echo "#define GCC34" >>include/inspircd_config.h
	fi
fi
if [ "$HAS_STRLCPY" -eq "1" ] ; then
	echo "#define HAS_STRLCPY" >>include/inspircd_config.h
fi
echo "#define SYSLOG_FACILITY LOG_DAEMON" >>include/inspircd_config.h
echo "#define SYSLOG_LEVEL LOG_NOTICE" >>include/inspircd_config.h
echo "#define CONFIG_FILE \"$CONFIG_DIR/inspircd.conf\"" >>include/inspircd_config.h
echo "#define MOD_PATH \"$MODULE_DIR\"" >>include/inspircd_config.h
echo "#define VERSION \"`sh ./src/version.sh`\"" >>include/inspircd_config.h
echo "#define MAXCLIENTS $MAX_CLIENT" >>include/inspircd_config.h
echo "#define NICKMAX $NICK_LENGT" >>include/inspircd_config.h
echo "#define CHANMAX $CHAN_LENGT" >>include/inspircd_config.h
echo "#define MAXCHANS $MAX_CHANNE" >>include/inspircd_config.h
echo "#define MAXMODES $MAXI_MODES" >>include/inspircd_config.h
echo "#define OPTIMISATION $OPTIMITEMP" >>include/inspircd_config.h
echo "#define SYSTEM \"`uname -n -s -r`\"" >>include/inspircd_config.h
echo "#define MAXBUF 514">>include/inspircd_config.h
touch include/inspircd_config.h

case "$OSNAME" in
	FreeBSD)
		LDLIBS="-Ldl"
		FLAGS="-fPIC -frtti $OPTIMISATI"
		MAKEPROG="gmake"
		;;
	*)
		LDLIBS="-ldl"
		FLAGS="-fPIC -frtti $OPTIMISATI"
		MAKEPROG="make"
		;;
esac

MODULES=""
for module in src/modules/*.cpp ; do
        mod=`echo $module | sed 's/.cpp/.so/' | sed 's/src\/modules\///'`
	MODULES="$MODULES $mod" 
done

for file in Makefile inspircd; do
	echo -e "\033[0mWriting \033[1;32m$file\033[0m"
	rm -f $file
	sed -e "
		s%@MAKEPROG@%$MAKEPROG%g
		s%@FLAGS@%$FLAGS%g
		s%@LDLIBS@%$LDLIBS%g
		s%@CONFIG_DIR@%$CONFIG_DIR%g
		s%@MODULE_DIR@%$MODULE_DIR%g
		s%@BINARY_DIR@%$BINARY_DIR%g
		s%@MODULES@%$MODULES%g
	" .${file}.inc >> $file
done
`chmod 700 inspircd`

echo -e "\033[0mWriting \033[1;32msrc/modules/Makefile\033[0m"
rm -f src/modules/Makefile

# Generate the Header..

echo "# (C) ChatSpike development team" >> src/modules/Makefile
echo "# Makefile by <Craig@ChatSpike.net>" >> src/modules/Makefile
echo "# Many Thanks to Andrew Church <achurch@achurch.org>" >> src/modules/Makefile
echo "#    for assisting with making this work right." >> src/modules/Makefile
echo "#" >> src/modules/Makefile
echo "# Automatically Generated by ./configure to add a module" >> src/modules/Makefile
echo "# please run ./configure --update" >> src/modules/Makefile
echo "" >> src/modules/Makefile
echo "all: \$(MODULES)" >> src/modules/Makefile
echo "" >> src/modules/Makefile

for module in src/modules/*.cpp ; do
     flags=`grep '$CompileFlags: ' $module | sed 's/\/\* $CompileFlags://' | sed 's/\*\///'`
     mod=`echo $module | sed 's/.cpp/.so/' | sed 's/src\/modules\///'`
     mod2=`echo $module | sed 's/src\/modules\///'`
     echo "$mod: $mod2 ../../include/modules.h ../../include/users.h ../../include/channels.h ../../include/servers.h ../../include/base.h" >> src/modules/Makefile
     echo "	\$(CC) -I../../include \$(FLAGS) -shared$flags -o $mod $mod2" >> src/modules/Makefile
     echo "	@cp $mod \$(MODPATH)/" >> src/modules/Makefile
     echo "" >> src/modules/Makefile
done


echo ""

echo ""
echo "Do you want to compile the IRCd binaries?"
echo -e $n "[\033[1;32my\033[0m] $c"
read YN
if [ "$YN" != "n" ] ; then
	echo ""
	echo -e "\033[1;32mCompiling...\033[0m"
	echo ""
	cd $ME
	$MAKEPROG
	echo ""
        echo "Done!"
else
	echo ""
	echo -e "To build your server with these settings, please type '\033[1;32m$MAKEPROG\033[0m' now."
fi


echo ""
echo -e "*** \033[1;32mRemember to edit your configuration files!!!\033[0m ***"
echo ""
