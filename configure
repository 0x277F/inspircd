#!/usr/bin/perl
# InspIRCd Configuration Script
#
# Copyright 2003 The ChatSpike Development Team
# <brain@chatspike.net>
# <Craig@chatspike.net>
#
# [14:21] Brain: <matrix impression> i know perl-fu!
#
# $Id$
#
########################################

chomp($topdir = `pwd`);
$this = resolve_directory($topdir);						# PWD, Regardless.
@modlist = ();                                                  		# Declare for Module List..
%config = ();                                                   		# Initiate Configuration Hash..
$config{ME}                 = resolve_directory($topdir);			# Present Working Directory
$config{CONFIG_DIR}         = resolve_directory($config{ME}."/conf");		# Configuration Directory
$config{MODULE_DIR}         = resolve_directory($config{ME}."/modules");	# Modules Directory
$config{BINARY_DIR}         = resolve_directory($config{ME}."/bin");		# Binary Directory
$config{LIBRARY_DIR}        = resolve_directory($config{ME}."/lib");		# Library Directory
$config{OPTIMITEMP}         = "0";                              		# Default Optimisation Value
$config{OPTIMISATI}         = "-g";                             		# Optimisation Flag
$config{NICK_LENGT}         = "32";                             		# Default Nick Length
$config{CHAN_LENGT}         = "64";                             		# Default Channel Name Length
$config{MAX_CHANNE}         = "20";                             		# Default Max. Channels per user..
$config{MAXI_MODES}         = "20";                             		# Default Max. Number of Modes set at once.
$config{HAS_STRLCPY}        = "false";                          		# strlcpy Check.
$config{USE_KQUEUE}         = "y";						# kqueue enabled
$config{USE_EPOLL}          = "y";						# epoll enabled
chomp($config{MAX_CLIENT_T} = `sh -c \"ulimit -n\"`);           		# FD Limit
chomp($config{GCCVER}       = `gcc -dumpversion | cut -c 1`);   		# Major GCC Version
chomp($config{GCC34}        = `gcc -dumpversion | cut -c 3`);   		# Minor GCC Version
chomp($config{OSNAME}       = `uname -s`);                      		# Operating System Name

if (!$config{OSNAME}) {
  $config{OSNAME} = "Unknown";                                  # For use when uname fails.
}

if (!$config{MAX_CLIENT_T}) { 
  $config{MAX_CLIENT_T} = 1024;                                 # Set a reasonable 'Default'
  $fd_scan_fail = "true";                                       # Used Later
}

# Get and Set some important vars..
getmodules();

my $arg = $ARGV[0];	                                        # Do Some Argument Checks..
if ($arg eq "-clean") { `rm -rf .config.cache`; }               # Remove the config.cache file.

if ($arg eq "-update") {
  # Does the cache file exist?
  if (!getcache()) {
    # No, No it doesn't.. *BASH*
    print "You have not run ./configure before. Please do this before trying to run the update script.\n";
    exit 0;
  } else {
    # We've Loaded the cache file and all our variables..
    print "Updating Files..\n";
    getosflags();
    writefiles();
    print "Complete.\n";
    exit;
  }
}

print "Checking for cache from previous configure...\n";
getcache();
print "Checking operating system version...\n";
getosflags();

if (!$config{MAX_CLIENT}) { 
  # If the cache hasn't set the max clients, copy the variable of MAX_CLIENT_T, this
  # allows us to keep _T for testing purposes. (ie. "Are you sure you want to go
  # higher than the found value" :))
  $config{MAX_CLIENT} = $config{MAX_CLIENT_T};
}

printf "Checking if strlcpy exists... ";
# Perform the strlcpy() test..
$config{HAS_STRLCPY} = "false";
my $fail = 0;
open(STRLCPY, "</usr/include/string.h") or $fail = 1;
if (!$fail)
{
	while (chomp($line = <STRLCPY>))
	{
		# try and find the delcaration of:
		# size_t strlcpy(...)
		if (($line =~ /size_t(\0x9|\s)+strlcpy(\0x9|\s)+\(/) || ($line =~ /size_t(\0x9|\s)+strlcpy\(/))
		{
			$config{HAS_STRLCPY} = "true";
		}
	}
	close(STRLCPY);
}
print "yes\n" if $config{HAS_STRLCPY} eq "true";
print "no\n" if $config{HAS_STRLCPY} eq "false";

printf "Checking if kqueue exists... ";
$has_kqueue = 0;
$fail = 0;
open(KQUEUE, "</usr/include/sys/event.h") or $fail = 1;
if (!$fail)
{
        while (chomp($line = <KQUEUE>))
        {
                # try and find the delcaration of:
		# int kqueue(void);
		if (($line =~ /int(\0x9|\s)+kqueue(\0x9|\s)+\(/) || ($line =~ /int(\0x9|\s)+kqueue\(/))
		{
			$has_kqueue = 1;
		}
	}
	close(KQUEUE);
}
print "yes\n" if $has_kqueue == 1;
print "no\n" if $has_kqueue == 0;

printf "Checking if epoll exists... ";
$has_epoll = 0;
$fail = 0;
open(EPOLL, "</usr/include/sys/epoll.h") or $fail = 1;
if (!$fail)
{
	while (chomp($line = <EPOLL>))
	{
		# try and find the declaration of:
		# extern int epoll_create (int __size) __THROW;
		if (($line =~ /int(\0x9|\s)+epoll_create(\0x9|\s)+\(/) || ($line =~ /int(\0x9|\s)+epoll_create\(/))
		{
			$has_epoll = 1;
		}
	}
	close(EPOLL);
}
print "yes\n" if $has_epoll == 1;
print "no\n" if $has_epoll == 0;

################################################################################
#                          BEGIN INTERACTIVE PART                              #
################################################################################

# Clear the Screen..
system("clear");
# Display Splash Logo..
show_splash();
chomp($wholeos = `uname -mnr`);

# Display Introduction Message..
print "
Welcome to the InspIRCd Configuration program!

*** If you are unsure of any of these values, leave it blank for    ***
*** standard settings that will work, and your server will run      ***
*** using them. If you are running this server as part of a         ***
*** larger network, you must consult with your network admins       ***
*** for the proper values to use, or server links will be unstable! ***

Press \033[1m<RETURN>\033[0m to accept the default for any option, or enter
a new value. Please note: You will \033[1mHAVE\033[0m to read the docs
dir, otherwise you won't have a config file!

Your operating system is: \033[1;32m$config{OSNAME}\033[0m ($wholeos), fdmax: $config{MAX_CLIENT_T}\n\n";

# Directory Settings..
dir_check("are the configuration files", "CONFIG_DIR");
dir_check("are the modules to be compiled to", "MODULE_DIR");
dir_check("is the IRCd binary to be placed", "BINARY_DIR");
dir_check("are the IRCd libraries to be placed", "LIBRARY_DIR");

if ($has_kqueue) {
	yesno(USE_KQUEUE,"You are running a BSD operating system, and kqueue\nwas detected. Would you like to enable kqueue support?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable kqueue?");
}
if ($has_epoll) {
	yesno(USE_EPOLL,"You are running a Linux 2.6+ operating system, and epoll\nwas detected. Would you like to enable epoll support?\nThis is likely to increase performance.\nIf you are unsure, answer yes.\n\nEnable epoll?");
}
$chose_hiperf = (($config{USE_EPOLL} eq "y") || ($config{USE_KQUEUE} eq "y"));
if (!$chose_hiperf)
{
	print "No high-performance socket engines are available, or you chose\n";
	print "not to enable one. Defaulting to select() engine.\n\n";
}

# File Descriptor Settings..
my $continue = 0;
while (!$continue) {
  print "Maximum number of clients at any one time ($config{MAX_CLIENT_T})\n";
  print "[\033[1;32m$config{MAX_CLIENT}\033[0m] -> ";
  chomp($var = <STDIN>);
  if ($var eq "") { $var = $config{MAX_CLIENT}; }
  if ($var =~ /^\d+$/) {
    if (($var > $config{MAX_CLIENT_T}) && ($fd_scan_failed ne true)) {
      # Client has entered a larger number than the 'discovered' value
      # Confirm.
      print "WARNING: Our scans have indicated that you are attempting
to use more sockets than there are avaliable. Are you sure
you wish to do this? It may cause the IRCd to malfunction [y/n]
[\033[1;32mn\033[0m] -> $c";
      chomp($tmp = <STDIN>);
      if ($tmp ne "y") {
        print "Please enter the correct value.\n\n";
        next;
      }
    }
  } else {
    print "You must enter a number in this field. Please try again.\n\n";
    next;
  }
  # If we get here, we should be good to go.
  $config{MAX_CLIENT} = $var;
  $continue = 1;
  print "\n";
}

my $continue = 0;
while (!$continue) {
  print "What is the Maximum length of nicknames?\n";
  print "[\033[1;32m$config{NICK_LENGT}\033[0m] -> ";
  chomp($var = <STDIN>);
  if ($var eq "") { $var = $config{NICK_LENGT}; }
  if ($var =~ /^\d+$/) {
    # We don't care what the number is, set it and be on our way.
    $config{NICK_LENGT} = $var;
    $continue = 1;
    print "\n";
  } else {
    print "You must enter a number in this field. Please try again.\n\n";
  }
}

my $continue = 0;
while (!$continue) {
  print "What is the Maximum number of mode changes in one line?\n";
  print "[\033[1;32m$config{MAXI_MODES}\033[0m] -> ";
  chomp($var = <STDIN>);
  if ($var eq "") { $var = $config{MAXI_MODES}; }
  if ($var =~ /^\d+$/) {
    # We don't care what the number is, set it and be on our way.
    $config{MAXI_MODES} = $var;
    $continue = 1;
    print "\n";
  } else {
    print "You must enter a number in this field. Please try again.\n\n";
  }
}

# Code Optimisation
print "Enter the Level Of Binary optimisation. This is a number between 0 and 3 (inclusive)
The InspIRCd Team will _NOT_ support any bug reports above 0.
Also note, the IRCd behaviour will be different depending on this value.
Please read the documentation for more information.

The Higher the number, the more optimised your binary will be. This value will default to 0
If you either a) Dont enter a number, or b) Enter a value outside the range.\n";
print "[\033[1;32m$config{OPTIMITEMP}\033[0m] -> ";
chomp($var = <STDIN>);
if ($var eq "") {
  $var = $config{OPTIMITEMP};
}

if ($var eq "1") {
  $config{OPTIMITEMP} = 1;
  $config{OPTIMISATI} = "-O";
} elsif ($var eq "2") {
  $config{OPTIMITEMP} = 2;
  $config{OPTIMISATI} = "-O2";
} elsif ($var eq "3") {
  $config{OPTIMITEMP} = 3;
  $config{OPTIMISATI} = "-O3";
} else {
  $config{OPTIMITEMP} = 0;
  $config{OPTIMISATI} = "-g";
}

print "\n\033[1;32mPre-build configuration is complete!\033[0m\n\n";
print "\033[0mConfig path:\033[1;32m\t\t\t$config{CONFIG_DIR}\n";
print "\033[0mModule path:\033[1;32m\t\t\t$config{MODULE_DIR}\n";
print "\033[0mMax connections:\033[1;32m\t\t$config{MAX_CLIENT}\n";
print "\033[0mMax User Channels\033[1;32m\t\t$config{MAX_CHANNE}\n";
print "\033[0mMax nickname length:\033[1;32m\t\t$config{NICK_LENGT}\n";
print "\033[0mMax channel length:\033[1;32m\t\t$config{CHAN_LENGT}\n";
print "\033[0mMax mode length:\033[1;32m\t\t$config{MAXI_MODES}\n";
print "\033[0mGCC Version Found:\033[1;32m\t\t$config{GCCVER}.$config{GCC34}\n";
print "\033[0mOptimatizaton Flag:\033[1;32m\t\t$config{OPTIMISATI}\033[0m\n\n";

makecache();
writefiles();

print "\n\n";
print "To build your server with these settings, please type '\033[1;32m$config{MAKEPROG}\033[0m' now.\n";
print "*** \033[1;32mRemember to edit your configuration files!!!\033[0m ***\n\n\n";

################################################################################
#                              HELPER FUNCTIONS                                #
################################################################################
sub getcache {
  # Retrieves the .config.cache file, and loads values into the main config hash.
  open(CACHE, ".config.cache") or return undef;
  while (<CACHE>) {
    chomp;

    # Ignore Blank lines, and comments..
    next if /^\s*$/;
    next if /^\s*#/;

    my ($key, $value) = split("=", $_);
    $value =~ /^\"(.*)\"$/;
    # Do something with data here!
    $config{$key} = $1;
  }
  close(CONFIG);
  return "true";
}

sub makecache {
  # Dump the contents of %config
  print "Writing \033[1;32mcache file\033[0m for future ./configures ...\n";
  open(FILEHANDLE, ">.config.cache");
  foreach $key (keys %config)
  {
    print FILEHANDLE "$key=\"$config{$key}\"\n";
  }
  close(FILEHANDLE);
}

sub dir_check {
  my ($desc, $hash_key) = @_;
  my $complete = 0;
  while (!$complete) {
    print "In what directory $desc?\n";
    print "[\033[1;32m$config{$hash_key}\033[0m] -> ";
    chomp($var = <STDIN>);
    if ($var eq "") { $var = $config{$hash_key}; }
    if ($var =~ /^\~\/(.+)$/) {
	# Convert it to a full path..
	$var = resolve_directory($ENV{HOME} . "/" . $1);
    }
    if (substr($var,0,1) ne "/")
    {
        # Assume relative Path was given.. fill in the rest.
        $var = $this . "/$var";
    }
    $var = resolve_directory($var); 
    if (! -e $var) {
      print "$var does not exist. Create it?\n[\033[1;32my\033[0m] ";
      chomp($tmp = <STDIN>);
      if (($tmp eq "") || ($tmp =~ /^y/i)) {
        # Attempt to Create the Dir..
        $chk = system("mkdir -p \"$var\" >> /dev/null 2>&1") / 256;
        if ($chk != 0) {
          print "Unable to create directory. ($var)\n\n";
          # Restart Loop..
          next;
        }
      } else {
        # They said they don't want to create, and we can't install there.
        print "\n\n";
        next;
      }
    } else {
      if (!is_dir($var)) {
        # Target exists, but is not a directory.
        print "File $var exists, but is not a directory.\n\n";
        next;
      }
    }
    # Either Dir Exists, or was created fine.
    $config{$hash_key} = $var;
    $complete = 1;
    print "\n";
  }
}

sub getosflags {
  if ($config{OSNAME} eq "FreeBSD") {
    $config{LDLIBS} = "-Ldl";
    $config{FLAGS}  = "-fPIC -frtti $OPTIMISATI -Woverloaded-virtual $config{OPTIMISATI}";
    $config{MAKEPROG} = "gmake";
  } else {
    $config{LDLIBS} = "-ldl";
    $config{FLAGS}  = "-fPIC -frtti $OPTIMISATI -Woverloaded-virtual $config{OPTIMISATI}";
    $config{MAKEPROG} = "make";
  }
  if ($config{OSNAME} eq "SunOS") {
    # solaris/sunos needs these
    $config{LDLIBS} = $config{LDLIBS} . " -lsocket -lnsl";
  }
}

sub is_dir {
  my ($path) = @_;
  if (chdir($path)) {
    chdir($this);
    return 1;
  } else {
    # Just in case..
    chdir($this);
    return 0;
  }
}

sub getmodules {
  my $i = 0;
  opendir(DIRHANDLE, "src/modules");
  foreach $name (sort readdir(DIRHANDLE)) {
    if ($name =~ /^m_(.+)\.cpp$/)
    {
      $modlist[$i++] = $1;
    }
  }
  closedir(DIRHANDLE);
}

sub writefiles {

  print "Writing \033[1;32minspircd_config.h\033[0m\n";
  # First File.. inspircd_config.h
  chomp(my $incos = `uname -n -s -r`);
  chomp(my $version = `sh ./src/version.sh`);
  open(FILEHANDLE, ">include/inspircd_config.h");
  print FILEHANDLE <<EOF;
/* Auto generated by configure, do not modify! */
#define SYSLOG_FACILITY LOG_DAEMON
#define SYSLOG_LEVEL LOG_NOTICE
#define CONFIG_FILE "$config{CONFIG_DIR}/inspircd.conf"
#define MOD_PATH "$config{MODULE_DIR}"
#define VERSION "$version"
#define MAXCLIENTS $config{MAX_CLIENT}
#define NICKMAX $config{NICK_LENGT}
#define CHANMAX $config{CHAN_LENGT}
#define MAXCHANS $config{MAX_CHANNE}
#define MAXMODES $config{MAXI_MODES}
#define OPTIMISATION $config{OPTIMITEMP}
#define SYSTEM "$incos"
#define MAXBUF 514
EOF

  if ($config{OSNAME} eq "SunOS") {
    print FILENAME "#define IS_SOLARIS";
  }
  if ($config{GCCVER} > 3) {
    print FILEHANDLE "#define GCC3\n";
    print FILEHANDLE "#define GCC34\n";
  }
  else
  {
    if ($config{GCCVER} == 3) {
      print FILEHANDLE "#define GCC3\n";
      if ($config{GCC34} > 3) {
        print FILEHANDLE "#define GCC34\n";
      }
    }
  }
  if ($config{HAS_STRLCPY} eq "true") {
    print FILEHANDLE "#define HAS_STRLCPY\n";
  }
  my $use_hiperf = 0;
  if (($has_kqueue) && ($config{USE_KQUEUE} eq "y")) {
    print FILEHANDLE "#define USE_KQUEUE\n";
    $use_hiperf = 1;
  }
  if (($has_epoll) && ($config{USE_EPOLL} eq "y")) {
    print FILEHANDLE "#define USE_EPOLL\n";
    $use_hiperf = 1;
  }
  # user didn't choose either epoll or select for their OS.
  # default them to USE_SELECT (ewwy puke puke)
  if (!$use_hiperf) {
    print FILEHANDLE "#define USE_SELECT\n";
  }
  close(FILEHANDLE);

  # Create a Modules List..
  my $modules = "";
  foreach $i (@modlist)
  {
    $modules .= "m_".$i.".so ";
  }
  chomp($modules);   # Remove Redundant whitespace..


  # Write all .in files.
  my $tmp = "";
  my $file = "";
  opendir(DIRHANDLE, $this);
  foreach $name (sort readdir(DIRHANDLE)) {
    if ($name =~ /^\.(.+)\.inc$/)
    {
      $file = $1;
      # All .name.inc files need parsing!
      $tmp = "";
      open(FILEHANDLE, ".$file.inc");
      while (<FILEHANDLE>) {
        $tmp .= $_;
      }
      close(FILEHANDLE);

      $tmp =~ s/\@MAKEPROG\@/$config{MAKEPROG}/;
      $tmp =~ s/\@FLAGS\@/$config{FLAGS}/;
      $tmp =~ s/\@LDLIBS\@/$config{LDLIBS}/;
      $tmp =~ s/\@CONFIG_DIR\@/$config{CONFIG_DIR}/;
      $tmp =~ s/\@MODULE_DIR\@/$config{MODULE_DIR}/;
      $tmp =~ s/\@BINARY_DIR\@/$config{BINARY_DIR}/;
      $tmp =~ s/\@LIBRARY_DIR\@/$config{LIBRARY_DIR}/;
      $tmp =~ s/\@MODULES\@/$modules/;

      print "Writing \033[1;32m$file\033[0m\n";
      open(FILEHANDLE, ">$file");
      print FILEHANDLE $tmp;
    }
  }
  closedir(DIRHANDLE);

  # Make inspircd executable!
  chmod 0744, 'inspircd';

  # Modules Makefile..
  print "Writing \033[1;32msrc/modules/Makefile\033[0m\n";
  open(FILEHANDLE, ">src/modules/Makefile");
  print FILEHANDLE <<EOF;
# (C) ChatSpike development team
# Makefile by <Craig\@ChatSpike.net>
# Many Thanks to Andrew Church <achurch\@achurch.org>
#    for assisting with making this work right.
#
# Automatically Generated by ./configure to add a modules
# please run ./configure --update

all: \$(MODULES)

EOF

  # Create a Modules List..
  my $modules = "";
  my $flags = "";
  foreach $i (@modlist)
  {
    $flags = getcompilerflags("src/modules/m_".$i.".cpp");
    print FILEHANDLE <<EOCHEESE;
m_$i.so: m_$i.cpp ../../include/modules.h ../../include/users.h ../../include/channels.h ../../include/servers.h ../../include/base.h
	\$(CC) -pipe -I../../include \$(FLAGS) $flags -export-dynamic -c m_$i.cpp
	\$(CC) \$(FLAGS) -shared $flags -o m_$i.so m_$i.o
	cp m_$i.so \$(MODPATH)/
	chmod 0700 \$(MODPATH)/m_$i.so

EOCHEESE
  }
}

sub getcompilerflags {
  my ($file) = @_;
  open(FLAGS, $file);
  while (<FLAGS>) {
    if ($_ =~ /^\/\* \$CompileFlags: (.+) \*\/$/) {
      close(FLAGS);
      return $1;
    }
  }
  close(FLAGS);
  return undef;
}

sub show_splash {
  print "'\033[1;33m####\033[0m:'\033[1;33m##\033[0m::: \033[1;33m##\033[0m::'\033[1;33m######\033[0m::'\033[1;33m########\033[0m::'\033[1;33m####\033[0m:'\033[1;33m########\033[0m:::'\033[1;33m######\033[0m::'\033[1;33m########\033[0m::\n";
  print ". \033[1;33m##\033[0m:: \033[1;33m###\033[0m:: \033[1;33m##\033[0m:'\033[1;33m##\033[0m... \033[1;33m##\033[0m: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:. \033[1;33m##\033[0m:: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:'\033[1;33m##\033[0m... \033[1;33m##\033[0m: \033[1;33m##\033[0m.... \033[1;33m##\033[0m:\n";
  print ": \033[1;33m##\033[0m:: \033[1;33m####\033[0m: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::..:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::..:: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:\n";
  print ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m \033[1;33m##\033[0m \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m########\033[0m::: \033[1;33m##\033[0m:: \033[1;33m########\033[0m:: \033[1;33m##\033[0m::::::: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:\n";
  print ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m. \033[1;33m####\033[0m::..... \033[1;33m##\033[0m: \033[1;33m##\033[0m.....:::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m.. \033[1;33m##\033[0m::: \033[1;33m##\033[0m::::::: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:\n";
  print ": \033[1;33m##\033[0m:: \033[1;33m##\033[0m:. \033[1;33m###\033[0m:'\033[1;33m##\033[0m::: \033[1;33m##\033[0m: \033[1;33m##\033[0m::::::::: \033[1;33m##\033[0m:: \033[1;33m##\033[0m::. \033[1;33m##\033[0m:: \033[1;33m##\033[0m::: \033[1;33m##\033[0m: \033[1;33m##\033[0m:::: \033[1;33m##\033[0m:\n";
  print "'\033[1;33m####\033[0m: \033[1;33m##\033[0m::. \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m##\033[0m::::::::'\033[1;33m####\033[0m: \033[1;33m##\033[0m:::. \033[1;33m##\033[0m:. \033[1;33m######\033[0m:: \033[1;33m########\033[0m::\n";
  print "\033[0m\033[0m....::..::::..:::......:::..:::::::::....::..:::::..:::......:::........:::\n\n";
}

sub resolve_directory {
	use File::Spec;
	return File::Spec->rel2abs($_[0]);
}

sub yesno {
	my ($flag,$prompt) = @_;
	print "$prompt [\033[1;32m$config{$flag}\033[0m] -> ";
	chomp($tmp = <STDIN>);
	if ($tmp eq "") { $tmp = $config{$flag} }

	if (($tmp eq "") || ($tmp =~ /^y/i)) {
		$config{$flag} = "y";
	} else {
		$config{$flag} = "n";
        }
	return;
}
