.TH "Server" 3 "9 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Server \- Allows server output and query functions This class contains methods which allow a module to query the state of the irc server, and produce output to users and other servers.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBServer\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "virtual \fB~Server\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "virtual void \fBSendOpers\fP (\fBstd::string\fP s)"
.br
.RI "\fISends text to all opers. \fP"
.ti -1c
.RI "virtual void \fBLog\fP (int level, \fBstd::string\fP s)"
.br
.RI "\fIWrites a log string. \fP"
.ti -1c
.RI "virtual void \fBSend\fP (int Socket, \fBstd::string\fP s)"
.br
.RI "\fISends a line of text down a TCP/IP socket. \fP"
.ti -1c
.RI "virtual void \fBSendServ\fP (int Socket, \fBstd::string\fP s)"
.br
.RI "\fISends text from the server to a socket. \fP"
.ti -1c
.RI "virtual void \fBSendChannelServerNotice\fP (\fBstd::string\fP ServName, \fBchanrec\fP *Channel, \fBstd::string\fP text)"
.br
.RI "\fIWrites text to a channel, but from a server, including all. \fP"
.ti -1c
.RI "virtual void \fBSendFrom\fP (int Socket, \fBuserrec\fP *User, \fBstd::string\fP s)"
.br
.RI "\fISends text from a user to a socket. \fP"
.ti -1c
.RI "virtual void \fBSendTo\fP (\fBuserrec\fP *Source, \fBuserrec\fP *Dest, \fBstd::string\fP s)"
.br
.RI "\fISends text from a user to another user. \fP"
.ti -1c
.RI "virtual void \fBSendChannel\fP (\fBuserrec\fP *User, \fBchanrec\fP *Channel, \fBstd::string\fP s, bool IncludeSender)"
.br
.RI "\fISends text from a user to a channel (mulicast). \fP"
.ti -1c
.RI "virtual bool \fBCommonChannels\fP (\fBuserrec\fP *u1, \fBuserrec\fP *u2)"
.br
.RI "\fIReturns true if two users share a common channel. \fP"
.ti -1c
.RI "virtual void \fBSendCommon\fP (\fBuserrec\fP *User, \fBstd::string\fP text, bool IncludeSender)"
.br
.RI "\fISends text from a user to one or more channels (mulicast). \fP"
.ti -1c
.RI "virtual void \fBSendWallops\fP (\fBuserrec\fP *User, \fBstd::string\fP text)"
.br
.RI "\fISends a WALLOPS message. \fP"
.ti -1c
.RI "virtual bool \fBIsNick\fP (\fBstd::string\fP nick)"
.br
.RI "\fIReturns true if a nick is valid. \fP"
.ti -1c
.RI "virtual int \fBCountUsers\fP (\fBchanrec\fP *c)"
.br
.RI "\fIReturns a count of the number of users on a channel. \fP"
.ti -1c
.RI "virtual \fBuserrec\fP * \fBFindNick\fP (\fBstd::string\fP nick)"
.br
.RI "\fIAttempts to look up a nick and return a pointer to it. \fP"
.ti -1c
.RI "virtual \fBuserrec\fP * \fBFindDescriptor\fP (int socket)"
.br
.RI "\fIAttempts to look up a nick using the file descriptor associated with that nick. \fP"
.ti -1c
.RI "virtual \fBchanrec\fP * \fBFindChannel\fP (\fBstd::string\fP channel)"
.br
.RI "\fIAttempts to look up a channel and return a pointer to it. \fP"
.ti -1c
.RI "virtual \fBstd::string\fP \fBChanMode\fP (\fBuserrec\fP *User, \fBchanrec\fP *Chan)"
.br
.RI "\fIAttempts to look up a user's privilages on a channel. \fP"
.ti -1c
.RI "virtual bool \fBIsOnChannel\fP (\fBuserrec\fP *User, \fBchanrec\fP *Chan)"
.br
.RI "\fIChecks if a user is on a channel. \fP"
.ti -1c
.RI "virtual \fBstd::string\fP \fBGetServerName\fP ()"
.br
.RI "\fIReturns the server name of the server where the module is loaded. \fP"
.ti -1c
.RI "virtual \fBstd::string\fP \fBGetNetworkName\fP ()"
.br
.RI "\fIReturns the network name, global to all linked servers. \fP"
.ti -1c
.RI "virtual \fBstd::string\fP \fBGetServerDescription\fP ()"
.br
.RI "\fIReturns the server description string of the local server. \fP"
.ti -1c
.RI "virtual \fBAdmin\fP \fBGetAdmin\fP ()"
.br
.RI "\fIReturns the information of the server as returned by the /ADMIN command. \fP"
.ti -1c
.RI "virtual bool \fBAddExtendedMode\fP (char modechar, int type, bool requires_oper, int params_when_on, int params_when_off)"
.br
.RI "\fIAdds an extended mode letter which is parsed by a module. \fP"
.ti -1c
.RI "virtual bool \fBAddExtendedListMode\fP (char modechar)"
.br
.RI "\fIAdds an extended mode letter which is parsed by a module and handled in a list fashion. \fP"
.ti -1c
.RI "virtual void \fBAddCommand\fP (char *cmd, handlerfunc f, char flags, int minparams, char *source)"
.br
.RI "\fIAdds a command to the command table. \fP"
.ti -1c
.RI "virtual void \fBSendMode\fP (char **parameters, int pcnt, \fBuserrec\fP *user)"
.br
.RI "\fISends a servermode. \fP"
.ti -1c
.RI "virtual void \fBSendToModeMask\fP (\fBstd::string\fP modes, int flags, \fBstd::string\fP text)"
.br
.RI "\fISends to all users matching a mode mask You must specify one or more usermodes as the first parameter. \fP"
.ti -1c
.RI "virtual \fBchanrec\fP * \fBJoinUserToChannel\fP (\fBuserrec\fP *user, \fBstd::string\fP cname, \fBstd::string\fP key)"
.br
.RI "\fIForces a user to join a channel. \fP"
.ti -1c
.RI "virtual \fBchanrec\fP * \fBPartUserFromChannel\fP (\fBuserrec\fP *user, \fBstd::string\fP cname, \fBstd::string\fP reason)"
.br
.RI "\fIForces a user to part a channel. \fP"
.ti -1c
.RI "virtual void \fBChangeUserNick\fP (\fBuserrec\fP *user, \fBstd::string\fP nickname)"
.br
.RI "\fIForces a user nickchange. \fP"
.ti -1c
.RI "virtual void \fBQuitUser\fP (\fBuserrec\fP *user, \fBstd::string\fP reason)"
.br
.RI "\fIForces a user to quit with the specified reason. \fP"
.ti -1c
.RI "virtual bool \fBMatchText\fP (\fBstd::string\fP sliteral, \fBstd::string\fP spattern)"
.br
.RI "\fIMatches text against a glob pattern. \fP"
.ti -1c
.RI "virtual void \fBCallCommandHandler\fP (\fBstd::string\fP commandname, char **parameters, int pcnt, \fBuserrec\fP *user)"
.br
.RI "\fICalls the handler for a command, either implemented by the core or by another module. \fP"
.ti -1c
.RI "virtual bool \fBIsValidModuleCommand\fP (\fBstd::string\fP commandname, int pcnt, \fBuserrec\fP *user)"
.br
.ti -1c
.RI "virtual void \fBChangeHost\fP (\fBuserrec\fP *user, \fBstd::string\fP host)"
.br
.RI "\fIChange displayed hostname of a user. \fP"
.ti -1c
.RI "virtual void \fBChangeGECOS\fP (\fBuserrec\fP *user, \fBstd::string\fP gecos)"
.br
.RI "\fIChange GECOS (fullname) of a user. \fP"
.ti -1c
.RI "virtual bool \fBIsUlined\fP (\fBstd::string\fP server)"
.br
.RI "\fIReturns true if the servername you give is ulined. \fP"
.ti -1c
.RI "virtual \fBchanuserlist\fP \fBGetUsers\fP (\fBchanrec\fP *chan)"
.br
.RI "\fIFetches the userlist of a channel. \fP"
.ti -1c
.RI "virtual bool \fBUserToPseudo\fP (\fBuserrec\fP *user, \fBstd::string\fP message)"
.br
.RI "\fIRemove a user's connection to the irc server, but leave their client in existence in the user hash. \fP"
.ti -1c
.RI "virtual bool \fBPseudoToUser\fP (\fBuserrec\fP *alive, \fBuserrec\fP *zombie, \fBstd::string\fP message)"
.br
.RI "\fIThis user takes one user, and switches their file descriptor with another user, so that one user 'becomes' the other. \fP"
.ti -1c
.RI "virtual void \fBAddGLine\fP (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)"
.br
.RI "\fIAdds a G-line The G-line is propogated to all of the servers in the mesh and enforced as soon as it is added. \fP"
.ti -1c
.RI "virtual void \fBAddQLine\fP (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP nickname)"
.br
.RI "\fIAdds a Q-line The Q-line is propogated to all of the servers in the mesh and enforced as soon as it is added. \fP"
.ti -1c
.RI "virtual void \fBAddZLine\fP (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP ipaddr)"
.br
.RI "\fIAdds a Z-line The Z-line is propogated to all of the servers in the mesh and enforced as soon as it is added. \fP"
.ti -1c
.RI "virtual void \fBAddKLine\fP (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)"
.br
.RI "\fIAdds a K-line The K-line is enforced as soon as it is added. \fP"
.ti -1c
.RI "virtual void \fBAddELine\fP (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)"
.br
.RI "\fIAdds a E-line The E-line is enforced as soon as it is added. \fP"
.ti -1c
.RI "virtual bool \fBDelGLine\fP (\fBstd::string\fP hostmask)"
.br
.RI "\fIDeletes a G-Line from all servers on the mesh. \fP"
.ti -1c
.RI "virtual bool \fBDelQLine\fP (\fBstd::string\fP nickname)"
.br
.RI "\fIDeletes a Q-Line from all servers on the mesh. \fP"
.ti -1c
.RI "virtual bool \fBDelZLine\fP (\fBstd::string\fP ipaddr)"
.br
.RI "\fIDeletes a Z-Line from all servers on the mesh. \fP"
.ti -1c
.RI "virtual bool \fBDelKLine\fP (\fBstd::string\fP hostmask)"
.br
.RI "\fIDeletes a local K-Line. \fP"
.ti -1c
.RI "virtual bool \fBDelELine\fP (\fBstd::string\fP hostmask)"
.br
.RI "\fIDeletes a local E-Line. \fP"
.ti -1c
.RI "virtual long \fBCalcDuration\fP (\fBstd::string\fP duration)"
.br
.RI "\fICalculates a duration This method will take a string containing a formatted duration (e.g. \fP"
.ti -1c
.RI "virtual bool \fBIsValidMask\fP (\fBstd::string\fP mask)"
.br
.RI "\fIReturns true if a nick!ident string is correctly formatted, false if otherwise. \fP"
.ti -1c
.RI "virtual \fBModule\fP * \fBFindModule\fP (\fBstd::string\fP name)"
.br
.RI "\fIThis function finds a module by name. \fP"
.ti -1c
.RI "virtual void \fBAddSocket\fP (\fBInspSocket\fP *sock)"
.br
.RI "\fIAdds a class derived from \fBInspSocket\fP to the server's socket engine. \fP"
.ti -1c
.RI "virtual void \fBDelSocket\fP (\fBInspSocket\fP *sock)"
.br
.RI "\fIDeletes a class derived from \fBInspSocket\fP from the server's socket engine. \fP"
.ti -1c
.RI "virtual void \fBRehashServer\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows server output and query functions This class contains methods which allow a module to query the state of the irc server, and produce output to users and other servers. 

All modules should instantiate at least one copy of this class, and use its member functions to perform their tasks.
.PP
Definition at line 1081 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Server::Server ()"
.PP
Default constructor. 
.PP
Creates a Server object.
.PP
Definition at line 394 of file modules.cpp.
.PP
.nf
395 {
396 }
.fi
.PP
.SS "Server::~Server ()\fC [virtual]\fP"
.PP
Default destructor. 
.PP
Destroys a Server object.
.PP
Definition at line 398 of file modules.cpp.
.PP
.nf
399 {
400 }
.fi
.PP
.SH "Member Function Documentation"
.PP 
.SS "void Server::AddCommand (char * cmd, handlerfunc f, char flags, int minparams, char * source)\fC [virtual]\fP"
.PP
Adds a command to the command table. 
.PP
This allows modules to add extra commands into the command table. You must place a function within your module which is is of type handlerfunc:
.PP
typedef void (handlerfunc) (char**, int, userrec*); ... void \fBhandle_kill(char **parameters, int pcnt, userrec *user)\fP
.PP
When the command is typed, the parameters will be placed into the parameters array (similar to argv) and the parameter count will be placed into pcnt (similar to argv). There will never be any less parameters than the 'minparams' value you specified when creating the command. The *user parameter is the class of the user which caused the command to trigger, who will always have the flag you specified in 'flags' when creating the initial command. For example to create an oper only command create the commands with flags='o'. The source parameter is used for resource tracking, and should contain the name of your module (with file extension) e.g. 'm_blarp.so'. If you place the wrong identifier here, you can cause crashes if your module is unloaded.
.PP
Definition at line 495 of file modules.cpp.
.PP
References createcommand().
.PP
.nf
496 {
497         createcommand(cmd,f,flags,minparams,source);
498 }
.fi
.PP
.SS "void Server::AddELine (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Adds a E-line The E-line is enforced as soon as it is added. 
.PP
The duration must be in seconds, however you can use the \fBServer::CalcDuration\fP method to convert durations into the 1w2d3h3m6s format used by /GLINE etc. The source is an arbitary string used to indicate who or what sent the data, usually this is the nickname of a person, or a server name.
.PP
Definition at line 758 of file modules.cpp.
.PP
References add_eline().
.PP
.nf
759 {
760         add_eline(duration, source.c_str(), reason.c_str(), hostmask.c_str());
761 }
.fi
.PP
.SS "bool Server::AddExtendedListMode (char modechar)\fC [virtual]\fP"
.PP
Adds an extended mode letter which is parsed by a module and handled in a list fashion. 
.PP
This call is used to implement modes like +q and +a. The characteristics of these modes are as follows:
.PP
(1) They are ALWAYS on channels, not on users, therefore their type is MT_CHANNEL
.PP
(2) They always take exactly one parameter when being added or removed
.PP
(3) They can be set multiple times, usually on users in channels
.PP
(4) The mode and its parameter are NOT stored in the channels modes structure
.PP
It is down to the module handling the mode to maintain state and determine what 'items' (e.g. users, or a banlist) have the mode set on them, and process the modes at the correct times, e.g. during access checks on channels, etc. When the extended mode is triggered the OnExtendedMode method will be triggered as above. Note that the target you are given will be a channel, if for example your mode is set 'on a user' (in for example +a) you must use Server::Find to locate the user the mode is operating on. Your mode handler may return 1 to handle the mode AND tell the core to display the mode change, e.g. '+aaa one two three' in the case of the mode for 'two', or it may return -1 to 'eat' the mode change, so the above example would become '+aa one three' after processing.
.PP
Definition at line 663 of file modules.cpp.
.PP
References DoAddExtendedMode(), ModeMakeList(), and MT_CHANNEL.
.PP
.nf
664 {
665         bool res = DoAddExtendedMode(modechar,MT_CHANNEL,false,1,1);
666         if (res)
667                 ModeMakeList(modechar);
668         return res;
669 }
.fi
.PP
.SS "bool Server::AddExtendedMode (char modechar, int type, bool requires_oper, int params_when_on, int params_when_off)\fC [virtual]\fP"
.PP
Adds an extended mode letter which is parsed by a module. 
.PP
This allows modules to add extra mode letters, e.g. +x for hostcloak. the 'type' parameter is either MT_CHANNEL, MT_CLIENT, or MT_SERVER, to indicate wether the mode is a channel mode, a client mode, or a server mode. requires_oper is used with MT_CLIENT type modes only to indicate the mode can only be set or unset by an oper. If this is used for MT_CHANNEL type modes it is ignored. params_when_on is the number of modes to expect when the mode is turned on (for type MT_CHANNEL only), e.g. with mode +k, this would have a value of 1. the params_when_off value has a similar value to params_when_on, except it indicates the number of parameters to expect when the mode is disabled. Modes which act in a similar way to channel mode +l (e.g. require a parameter to enable, but not to disable) should use this parameter. The function returns false if the mode is unavailable, and will not attempt to allocate another character, as this will confuse users. This also means that as only one module can claim a specific mode character, the core does not need to keep track of which modules own which modes, which speeds up operation of the server. In this version, a mode can have at most one parameter, attempting to use more parameters will have undefined effects.
.PP
Definition at line 635 of file modules.cpp.
.PP
References DEBUG, DoAddExtendedMode(), MT_CLIENT, and MT_SERVER.
.PP
.nf
636 {
637         if (((modechar >= 'A') && (modechar <= 'Z')) || ((modechar >= 'a') && (modechar <= 'z')))
638         {
639                 if (type == MT_SERVER)
640                 {
641                         log(DEBUG,'*** API ERROR *** Modes of type MT_SERVER are reserved for future expansion');
642                         return false;
643                 }
644                 if (((params_when_on>0) || (params_when_off>0)) && (type == MT_CLIENT))
645                 {
646                         log(DEBUG,'*** API ERROR *** Parameters on MT_CLIENT modes are not supported');
647                         return false;
648                 }
649                 if ((params_when_on>1) || (params_when_off>1))
650                 {
651                         log(DEBUG,'*** API ERROR *** More than one parameter for an MT_CHANNEL mode is not yet supported');
652                         return false;
653                 }
654                 return DoAddExtendedMode(modechar,type,requires_oper,params_when_on,params_when_off);
655         }
656         else
657         {
658                 log(DEBUG,'*** API ERROR *** Muppet modechar detected.');
659         }
660         return false;
661 }
.fi
.PP
.SS "void Server::AddGLine (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Adds a G-line The G-line is propogated to all of the servers in the mesh and enforced as soon as it is added. 
.PP
The duration must be in seconds, however you can use the \fBServer::CalcDuration\fP method to convert durations into the 1w2d3h3m6s format used by /GLINE etc. The source is an arbitary string used to indicate who or what sent the data, usually this is the nickname of a person, or a server name.
.PP
Definition at line 738 of file modules.cpp.
.PP
References add_gline().
.PP
.nf
739 {
740         add_gline(duration, source.c_str(), reason.c_str(), hostmask.c_str());
741 }
.fi
.PP
.SS "void Server::AddKLine (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Adds a K-line The K-line is enforced as soon as it is added. 
.PP
The duration must be in seconds, however you can use the \fBServer::CalcDuration\fP method to convert durations into the 1w2d3h3m6s format used by /GLINE etc. The source is an arbitary string used to indicate who or what sent the data, usually this is the nickname of a person, or a server name.
.PP
Definition at line 753 of file modules.cpp.
.PP
References add_kline().
.PP
.nf
754 {
755         add_kline(duration, source.c_str(), reason.c_str(), hostmask.c_str());
756 }
.fi
.PP
.SS "void Server::AddQLine (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP nickname)\fC [virtual]\fP"
.PP
Adds a Q-line The Q-line is propogated to all of the servers in the mesh and enforced as soon as it is added. 
.PP
The duration must be in seconds, however you can use the \fBServer::CalcDuration\fP method to convert durations into the 1w2d3h3m6s format used by /GLINE etc. The source is an arbitary string used to indicate who or what sent the data, usually this is the nickname of a person, or a server name.
.PP
Definition at line 743 of file modules.cpp.
.PP
References add_qline().
.PP
.nf
744 {
745         add_qline(duration, source.c_str(), reason.c_str(), nickname.c_str());
746 }
.fi
.PP
.SS "void Server::AddSocket (\fBInspSocket\fP * sock)\fC [virtual]\fP"
.PP
Adds a class derived from \fBInspSocket\fP to the server's socket engine. 
.PP
Definition at line 402 of file modules.cpp.
.PP
References module_sockets.
.PP
.nf
403 {
404         module_sockets.push_back(sock);
405 }
.fi
.PP
.SS "void Server::AddZLine (long duration, \fBstd::string\fP source, \fBstd::string\fP reason, \fBstd::string\fP ipaddr)\fC [virtual]\fP"
.PP
Adds a Z-line The Z-line is propogated to all of the servers in the mesh and enforced as soon as it is added. 
.PP
The duration must be in seconds, however you can use the \fBServer::CalcDuration\fP method to convert durations into the 1w2d3h3m6s format used by /GLINE etc. The source is an arbitary string used to indicate who or what sent the data, usually this is the nickname of a person, or a server name.
.PP
Definition at line 748 of file modules.cpp.
.PP
References add_zline().
.PP
.nf
749 {
750         add_zline(duration, source.c_str(), reason.c_str(), ipaddr.c_str());
751 }
.fi
.PP
.SS "long Server::CalcDuration (\fBstd::string\fP duration)\fC [virtual]\fP"
.PP
Calculates a duration This method will take a string containing a formatted duration (e.g. 
.PP
'1w2d') and return its value as a total number of seconds. This is the same function used internally by /GLINE etc to set the ban times.
.PP
Definition at line 788 of file modules.cpp.
.PP
References duration().
.PP
.nf
789 {
790         return duration(delta.c_str());
791 }
.fi
.PP
.SS "void Server::CallCommandHandler (\fBstd::string\fP commandname, char ** parameters, int pcnt, \fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Calls the handler for a command, either implemented by the core or by another module. 
.PP
You can use this function to trigger other commands in the ircd, such as PRIVMSG, JOIN, KICK etc, or even as a method of callback. By defining command names that are untypeable for users on irc (e.g. those which contain a  or 
.br
) you may use them as callback identifiers. The first parameter to this method is the name of the command handler you wish to call, e.g. PRIVMSG. This will be a command handler previously registered by the core or wih \fBAddCommand()\fP. The second parameter is an array of parameters, and the third parameter is a count of parameters in the array. If you do not pass enough parameters to meet the minimum needed by the handler, the functiom will silently ignore it. The final parameter is the user executing the command handler, used for privilage checks, etc.
.PP
Definition at line 480 of file modules.cpp.
.PP
.nf
481 {
482         call_handler(commandname.c_str(),parameters,pcnt,user);
483 }
.fi
.PP
.SS "void Server::ChangeGECOS (\fBuserrec\fP * user, \fBstd::string\fP gecos)\fC [virtual]\fP"
.PP
Change GECOS (fullname) of a user. 
.PP
You should always call this method to change a user's GECOS rather than writing directly to the fullname member of userrec, as any change applied via this method will be propogated to any linked servers.
.PP
Definition at line 578 of file modules.cpp.
.PP
References ChangeName().
.PP
.nf
579 {
580         ChangeName(user,gecos.c_str());
581 }
.fi
.PP
.SS "void Server::ChangeHost (\fBuserrec\fP * user, \fBstd::string\fP host)\fC [virtual]\fP"
.PP
Change displayed hostname of a user. 
.PP
You should always call this method to change a user's host rather than writing directly to the dhost member of userrec, as any change applied via this method will be propogated to any linked servers.
.PP
Definition at line 573 of file modules.cpp.
.PP
References ChangeDisplayedHost().
.PP
.nf
574 {
575         ChangeDisplayedHost(user,host.c_str());
576 }
.fi
.PP
.SS "void Server::ChangeUserNick (\fBuserrec\fP * user, \fBstd::string\fP nickname)\fC [virtual]\fP"
.PP
Forces a user nickchange. 
.PP
This command works similarly to SVSNICK, and can be used to implement Q-lines etc. If you specify an invalid nickname, the nick change will be dropped and the target user will receive the error numeric for it.
.PP
Definition at line 465 of file modules.cpp.
.PP
.nf
466 {
467         force_nickchange(user,nickname.c_str());
468 }
.fi
.PP
.SS "\fBstd::string\fP Server::ChanMode (\fBuserrec\fP * User, \fBchanrec\fP * Chan)\fC [virtual]\fP"
.PP
Attempts to look up a user's privilages on a channel. 
.PP
This function will return a string containing either @, %, +, or an empty string, representing the user's privilages upon the channel you specify.
.PP
Definition at line 603 of file modules.cpp.
.PP
References cmode().
.PP
.nf
604 {
605         return cmode(User,Chan);
606 }
.fi
.PP
.SS "bool Server::CommonChannels (\fBuserrec\fP * u1, \fBuserrec\fP * u2)\fC [virtual]\fP"
.PP
Returns true if two users share a common channel. 
.PP
This method is used internally by the NICK and QUIT commands, and the \fBServer::SendCommon\fP method.
.PP
Definition at line 551 of file modules.cpp.
.PP
References common_channels().
.PP
.nf
552 {
553         return (common_channels(u1,u2) != 0);
554 }
.fi
.PP
.SS "int Server::CountUsers (\fBchanrec\fP * c)\fC [virtual]\fP"
.PP
Returns a count of the number of users on a channel. 
.PP
This will NEVER be 0, as if the chanrec exists, it will have at least one user in the channel.
.PP
Definition at line 671 of file modules.cpp.
.PP
.nf
672 {
673         return usercount(c);
674 }
.fi
.PP
.SS "bool Server::DelELine (\fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Deletes a local E-Line. 
.PP
Definition at line 783 of file modules.cpp.
.PP
References del_eline().
.PP
.nf
784 {
785         return del_eline(hostmask.c_str());
786 }
.fi
.PP
.SS "bool Server::DelGLine (\fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Deletes a G-Line from all servers on the mesh. 
.PP
Definition at line 763 of file modules.cpp.
.PP
References del_gline().
.PP
.nf
764 {
765         return del_gline(hostmask.c_str());
766 }
.fi
.PP
.SS "bool Server::DelKLine (\fBstd::string\fP hostmask)\fC [virtual]\fP"
.PP
Deletes a local K-Line. 
.PP
Definition at line 778 of file modules.cpp.
.PP
References del_kline().
.PP
.nf
779 {
780         return del_kline(hostmask.c_str());
781 }
.fi
.PP
.SS "bool Server::DelQLine (\fBstd::string\fP nickname)\fC [virtual]\fP"
.PP
Deletes a Q-Line from all servers on the mesh. 
.PP
Definition at line 768 of file modules.cpp.
.PP
References del_qline().
.PP
.nf
769 {
770         return del_qline(nickname.c_str());
771 }
.fi
.PP
.SS "void Server::DelSocket (\fBInspSocket\fP * sock)\fC [virtual]\fP"
.PP
Deletes a class derived from \fBInspSocket\fP from the server's socket engine. 
.PP
Definition at line 413 of file modules.cpp.
.PP
References module_sockets.
.PP
.nf
414 {
415         for (std::vector<InspSocket*>::iterator a = module_sockets.begin(); a < module_sockets.end(); a++)
416         {
417                 if (*a == sock)
418                 {
419                         module_sockets.erase(a);
420                         return;
421                 }
422         }
423 }
.fi
.PP
.SS "bool Server::DelZLine (\fBstd::string\fP ipaddr)\fC [virtual]\fP"
.PP
Deletes a Z-Line from all servers on the mesh. 
.PP
Definition at line 773 of file modules.cpp.
.PP
References del_zline().
.PP
.nf
774 {
775         return del_zline(ipaddr.c_str());
776 }
.fi
.PP
.SS "\fBchanrec\fP * Server::FindChannel (\fBstd::string\fP channel)\fC [virtual]\fP"
.PP
Attempts to look up a channel and return a pointer to it. 
.PP
This function will return NULL if the channel does not exist.
.PP
Definition at line 598 of file modules.cpp.
.PP
.nf
599 {
600         return FindChan(channel.c_str());
601 }
.fi
.PP
.SS "\fBuserrec\fP * Server::FindDescriptor (int socket)\fC [virtual]\fP"
.PP
Attempts to look up a nick using the file descriptor associated with that nick. 
.PP
This function will return NULL if the file descriptor is not associated with a valid user.
.PP
Definition at line 593 of file modules.cpp.
.PP
.nf
594 {
595         return (socket < 65536 ? fd_ref_table[socket] : NULL);
596 }
.fi
.PP
.SS "\fBModule\fP * Server::FindModule (\fBstd::string\fP name)\fC [virtual]\fP"
.PP
This function finds a module by name. 
.PP
You must provide the filename of the module. If the module cannot be found (is not loaded) the function will return NULL.
.PP
Definition at line 822 of file modules.cpp.
.PP
References MODCOUNT, module_names, and modules.
.PP
.nf
823 {
824         for (int i = 0; i <= MODCOUNT; i++)
825         {
826                 if (module_names[i] == name)
827                 {
828                         return modules[i];
829                 }
830         }
831         return NULL;
832 }
.fi
.PP
.SS "\fBuserrec\fP * Server::FindNick (\fBstd::string\fP nick)\fC [virtual]\fP"
.PP
Attempts to look up a nick and return a pointer to it. 
.PP
This function will return NULL if the nick does not exist.
.PP
Definition at line 588 of file modules.cpp.
.PP
.nf
589 {
590         return Find(nick);
591 }
.fi
.PP
.SS "\fBAdmin\fP Server::GetAdmin ()\fC [virtual]\fP"
.PP
Returns the information of the server as returned by the /ADMIN command. 
.PP
See the \fBAdmin\fP class for further information of the return value. The members \fBAdmin::Nick\fP, \fBAdmin::Email\fP and \fBAdmin::Name\fP contain the information for the server where the module is loaded.
.PP
Definition at line 628 of file modules.cpp.
.PP
.nf
629 {
630         return Admin(getadminname(),getadminemail(),getadminnick());
631 }
.fi
.PP
.SS "\fBstd::string\fP Server::GetNetworkName ()\fC [virtual]\fP"
.PP
Returns the network name, global to all linked servers. 
.PP
Definition at line 618 of file modules.cpp.
.PP
.nf
619 {
620         return getnetworkname();
621 }
.fi
.PP
.SS "\fBstd::string\fP Server::GetServerDescription ()\fC [virtual]\fP"
.PP
Returns the server description string of the local server. 
.PP
Definition at line 623 of file modules.cpp.
.PP
.nf
624 {
625         return getserverdesc();
626 }
.fi
.PP
.SS "\fBstd::string\fP Server::GetServerName ()\fC [virtual]\fP"
.PP
Returns the server name of the server where the module is loaded. 
.PP
Definition at line 613 of file modules.cpp.
.PP
.nf
614 {
615         return getservername();
616 }
.fi
.PP
.SS "\fBchanuserlist\fP Server::GetUsers (\fBchanrec\fP * chan)\fC [virtual]\fP"
.PP
Fetches the userlist of a channel. 
.PP
This function must be here and not a member of userrec or chanrec due to include constraints.
.PP
Definition at line 453 of file modules.cpp.
.PP
References chanrec::GetUsers(), and list.
.PP
.nf
454 {
455         chanuserlist userl;
456         userl.clear();
457         std::vector<char*> *list = chan->GetUsers();
458         for (std::vector<char*>::iterator i = list->begin(); i != list->end(); i++)
459         {
460                 char* o = *i;
461                 userl.push_back((userrec*)o);
462         }
463         return userl;
464 }
.fi
.PP
.SS "bool Server::IsNick (\fBstd::string\fP nick)\fC [virtual]\fP"
.PP
Returns true if a nick is valid. 
.PP
Nicks for unregistered connections will return false.
.PP
Definition at line 583 of file modules.cpp.
.PP
References isnick().
.PP
.nf
584 {
585         return (isnick(nick.c_str()) != 0);
586 }
.fi
.PP
.SS "bool Server::IsOnChannel (\fBuserrec\fP * User, \fBchanrec\fP * Chan)\fC [virtual]\fP"
.PP
Checks if a user is on a channel. 
.PP
This function will return true or false to indicate if user 'User' is on channel 'Chan'.
.PP
Definition at line 608 of file modules.cpp.
.PP
References has_channel().
.PP
.nf
609 {
610         return has_channel(User,Chan);
611 }
.fi
.PP
.SS "bool Server::IsUlined (\fBstd::string\fP server)\fC [virtual]\fP"
.PP
Returns true if the servername you give is ulined. 
.PP
ULined servers have extra privilages. They are allowed to change nicknames on remote servers, change modes of clients which are on remote servers and set modes of channels where there are no channel operators for that channel on the ulined server, amongst other things. Ulined server data is also broadcast across the mesh at all times as opposed to selectively messaged in the case of normal servers, as many ulined server types (such as services) do not support meshed links and must operate in this manner.
.PP
Definition at line 475 of file modules.cpp.
.PP
References is_uline().
.PP
.nf
476 {
477         return is_uline(server.c_str());
478 }
.fi
.PP
.SS "bool Server::IsValidMask (\fBstd::string\fP mask)\fC [virtual]\fP"
.PP
Returns true if a nick!ident string is correctly formatted, false if otherwise. 
.PP
Definition at line 793 of file modules.cpp.
.PP
.nf
794 {
795         const char* dest = mask.c_str();
796         if (strchr(dest,'!')==0)
797                 return false;
798         if (strchr(dest,'@')==0)
799                 return false;
800         for (unsigned int i = 0; i < strlen(dest); i++)
801                 if (dest[i] < 32)
802                         return false;
803         for (unsigned int i = 0; i < strlen(dest); i++)
804                 if (dest[i] > 126)
805                         return false;
806         unsigned int c = 0;
807         for (unsigned int i = 0; i < strlen(dest); i++)
808                 if (dest[i] == '!')
809                         c++;
810         if (c>1)
811                 return false;
812         c = 0;
813         for (unsigned int i = 0; i < strlen(dest); i++)
814                 if (dest[i] == '@')
815                         c++;
816         if (c>1)
817                 return false;
818 
819         return true;
820 }
.fi
.PP
.SS "bool Server::IsValidModuleCommand (\fBstd::string\fP commandname, int pcnt, \fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Definition at line 485 of file modules.cpp.
.PP
.nf
486 {
487         return is_valid_cmd(commandname.c_str(), pcnt, user);
488 }
.fi
.PP
.SS "\fBchanrec\fP * Server::JoinUserToChannel (\fBuserrec\fP * user, \fBstd::string\fP cname, \fBstd::string\fP key)\fC [virtual]\fP"
.PP
Forces a user to join a channel. 
.PP
This is similar to svsjoin and can be used to implement redirection, etc. On success, the return value is a valid pointer to a chanrec* of the channel the user was joined to. On failure, the result is NULL.
.PP
Definition at line 443 of file modules.cpp.
.PP
.nf
444 {
445         return add_channel(user,cname.c_str(),key.c_str(),false);
446 }
.fi
.PP
.SS "void Server::Log (int level, \fBstd::string\fP s)\fC [virtual]\fP"
.PP
Writes a log string. 
.PP
This method writes a line of text to the log. If the level given is lower than the level given in the configuration, this command has no effect.
.PP
Definition at line 490 of file modules.cpp.
.PP
.nf
491 {
492         log(level,'%s',s.c_str());
493 }
.fi
.PP
.SS "bool Server::MatchText (\fBstd::string\fP sliteral, \fBstd::string\fP spattern)\fC [virtual]\fP"
.PP
Matches text against a glob pattern. 
.PP
Uses the ircd's internal matching function to match string against a globbing pattern, e.g. *!*@*.com Returns true if the literal successfully matches the pattern, false if otherwise.
.PP
Definition at line 430 of file modules.cpp.
.PP
.nf
431 {
432         char literal[MAXBUF],pattern[MAXBUF];
433         strlcpy(literal,sliteral.c_str(),MAXBUF);
434         strlcpy(pattern,spattern.c_str(),MAXBUF);
435         return match(literal,pattern);
436 }
.fi
.PP
.SS "\fBchanrec\fP * Server::PartUserFromChannel (\fBuserrec\fP * user, \fBstd::string\fP cname, \fBstd::string\fP reason)\fC [virtual]\fP"
.PP
Forces a user to part a channel. 
.PP
This is similar to svspart and can be used to implement redirection, etc. Although the return value of this function is a pointer to a channel record, the returned data is undefined and should not be read or written to. This behaviour may be changed in a future version.
.PP
Definition at line 448 of file modules.cpp.
.PP
.nf
449 {
450         return del_channel(user,cname.c_str(),reason.c_str(),false);
451 }
.fi
.PP
.SS "bool Server::PseudoToUser (\fBuserrec\fP * alive, \fBuserrec\fP * zombie, \fBstd::string\fP message)\fC [virtual]\fP"
.PP
This user takes one user, and switches their file descriptor with another user, so that one user 'becomes' the other. 
.PP
The user in 'alive' is booted off the server with the given message. The user referred to by 'zombie' should have previously been locked with Server::ZombifyUser, otherwise stale sockets and file descriptor leaks can occur. After this call, the pointer to alive will be invalid, and the pointer to zombie will be equivalent in effect to the old pointer to alive.
.PP
Definition at line 708 of file modules.cpp.
.PP
References ucrec::channel, userrec::chans, userrec::ClearBuffer(), connection::fd, FD_MAGIC_NUMBER, connection::host, userrec::ident, chanrec::name, userrec::nick, chanrec::setby, chanrec::topic, and chanrec::topicset.
.PP
.nf
709 {
710         zombie->fd = alive->fd;
711         alive->fd = FD_MAGIC_NUMBER;
712         alive->ClearBuffer();
713         Write(zombie->fd,':%s!%s@%s NICK %s',alive->nick,alive->ident,alive->host,zombie->nick);
714         kill_link(alive,message.c_str());
715         fd_ref_table[zombie->fd] = zombie;
716         for (int i = 0; i != MAXCHANS; i++)
717         {
718                 if (zombie->chans[i].channel != NULL)
719                 {
720                         if (zombie->chans[i].channel->name)
721                         {
722                                 chanrec* Ptr = zombie->chans[i].channel;
723                                 WriteFrom(zombie->fd,zombie,'JOIN %s',Ptr->name);
724                                 if (Ptr->topicset)
725                                 {
726                                         WriteServ(zombie->fd,'332 %s %s :%s', zombie->nick, Ptr->name, Ptr->topic);
727                                         WriteServ(zombie->fd,'333 %s %s %s %d', zombie->nick, Ptr->name, Ptr->setby, Ptr->topicset);
728                                 }
729                                 userlist(zombie,Ptr);
730                                 WriteServ(zombie->fd,'366 %s %s :End of /NAMES list.', zombie->nick, Ptr->name);
731 
732                         }
733                 }
734         }
735         return true;
736 }
.fi
.PP
.SS "void Server::QuitUser (\fBuserrec\fP * user, \fBstd::string\fP reason)\fC [virtual]\fP"
.PP
Forces a user to quit with the specified reason. 
.PP
To the user, it will appear as if they typed /QUIT themselves, except for the fact that this function may bypass the quit prefix specified in the config file.
.PP
WARNING!
.PP
Once you call this function, userrec* user will immediately become INVALID. You MUST NOT write to, or read from this pointer after calling the QuitUser method UNDER ANY CIRCUMSTANCES! The best course of action after calling this method is to immediately bail from your handler.
.PP
Definition at line 470 of file modules.cpp.
.PP
.nf
471 {
472         kill_link(user,reason.c_str());
473 }
.fi
.PP
.SS "void Server::RehashServer ()\fC [virtual]\fP"
.PP
Definition at line 407 of file modules.cpp.
.PP
.nf
408 {
409         WriteOpers('*** Rehashing config file');
410         ReadConfig(false,NULL);
411 }
.fi
.PP
.SS "void Server::Send (int Socket, \fBstd::string\fP s)\fC [virtual]\fP"
.PP
Sends a line of text down a TCP/IP socket. 
.PP
This method writes a line of text to an established socket, cutting it to 510 characters plus a carriage return and linefeed if required.
.PP
Definition at line 505 of file modules.cpp.
.PP
.nf
506 {
507         Write(Socket,'%s',s.c_str());
508 }
.fi
.PP
.SS "void Server::SendChannel (\fBuserrec\fP * User, \fBchanrec\fP * Channel, \fBstd::string\fP s, bool IncludeSender)\fC [virtual]\fP"
.PP
Sends text from a user to a channel (mulicast). 
.PP
This method writes a line of text to a channel, with the given user's nick/ident /host combination prepended, as used in PRIVMSG etc commands (see RFC 1459). If the IncludeSender flag is set, then the text is also sent back to the user from which it originated, as seen in MODE (see RFC 1459).
.PP
Definition at line 539 of file modules.cpp.
.PP
.nf
540 {
541         if (IncludeSender)
542         {
543                 WriteChannel(Channel,User,'%s',s.c_str());
544         }
545         else
546         {
547                 ChanExceptSender(Channel,User,'%s',s.c_str());
548         }
549 }
.fi
.PP
.SS "void Server::SendChannelServerNotice (\fBstd::string\fP ServName, \fBchanrec\fP * Channel, \fBstd::string\fP text)\fC [virtual]\fP"
.PP
Writes text to a channel, but from a server, including all. 
.PP
This can be used to send server notices to a group of users.
.PP
Definition at line 534 of file modules.cpp.
.PP
.nf
535 {
536         WriteChannelWithServ((char*)ServName.c_str(), Channel, '%s', text.c_str());
537 }
.fi
.PP
.SS "void Server::SendCommon (\fBuserrec\fP * User, \fBstd::string\fP text, bool IncludeSender)\fC [virtual]\fP"
.PP
Sends text from a user to one or more channels (mulicast). 
.PP
This method writes a line of text to all users which share a common channel with a given user, with the user's nick/ident/host combination prepended, as used in PRIVMSG etc commands (see RFC 1459). If the IncludeSender flag is set, then the text is also sent back to the user from which it originated, as seen in NICK (see RFC 1459). Otherwise, it is only sent to the other recipients, as seen in QUIT.
.PP
Definition at line 556 of file modules.cpp.
.PP
.nf
557 {
558         if (IncludeSender)
559         {
560                 WriteCommon(User,'%s',text.c_str());
561         }
562         else
563         {
564                 WriteCommonExcept(User,'%s',text.c_str());
565         }
566 }
.fi
.PP
.SS "void Server::SendFrom (int Socket, \fBuserrec\fP * User, \fBstd::string\fP s)\fC [virtual]\fP"
.PP
Sends text from a user to a socket. 
.PP
This method writes a line of text to an established socket, with the given user's nick/ident /host combination prepended, as used in PRIVSG etc commands (see RFC 1459)
.PP
Definition at line 515 of file modules.cpp.
.PP
.nf
516 {
517         WriteFrom(Socket,User,'%s',s.c_str());
518 }
.fi
.PP
.SS "void Server::SendMode (char ** parameters, int pcnt, \fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Sends a servermode. 
.PP
you must format the parameters array with the target, modes and parameters for those modes.
.PP
For example:
.PP
char *modes[3];
.PP
modes[0] = ChannelName;
.PP
modes[1] = '+o';
.PP
modes[2] = user->nick;
.PP
Srv->SendMode(modes,3,user);
.PP
The modes will originate from the server where the command was issued, however responses (e.g. numerics) will be sent to the user you provide as the third parameter. You must be sure to get the number of parameters correct in the pcnt parameter otherwise you could leave your server in an unstable state!
.PP
Definition at line 500 of file modules.cpp.
.PP
References server_mode().
.PP
.nf
501 {
502         server_mode(parameters,pcnt,user);
503 }
.fi
.PP
.SS "void Server::SendOpers (\fBstd::string\fP s)\fC [virtual]\fP"
.PP
Sends text to all opers. 
.PP
This method sends a server notice to all opers with the usermode +s.
.PP
Definition at line 425 of file modules.cpp.
.PP
.nf
426 {
427         WriteOpers('%s',s.c_str());
428 }
.fi
.PP
.SS "void Server::SendServ (int Socket, \fBstd::string\fP s)\fC [virtual]\fP"
.PP
Sends text from the server to a socket. 
.PP
This method writes a line of text to an established socket, with the servername prepended as used by numerics (see RFC 1459)
.PP
Definition at line 510 of file modules.cpp.
.PP
.nf
511 {
512         WriteServ(Socket,'%s',s.c_str());
513 }
.fi
.PP
.SS "void Server::SendTo (\fBuserrec\fP * Source, \fBuserrec\fP * Dest, \fBstd::string\fP s)\fC [virtual]\fP"
.PP
Sends text from a user to another user. 
.PP
This method writes a line of text to a user, with a user's nick/ident /host combination prepended, as used in PRIVMSG etc commands (see RFC 1459) If you specify NULL as the source, then the data will originate from the local server, e.g. instead of:
.PP
:user!ident TEXT
.PP
The format will become:
.PP
:localserver TEXT
.PP
Which is useful for numerics and server notices to single users, etc.
.PP
Definition at line 520 of file modules.cpp.
.PP
References connection::fd.
.PP
.nf
521 {
522         if (!Source)
523         {
524                 // if source is NULL, then the message originates from the local server
525                 Write(Dest->fd,':%s %s',this->GetServerName().c_str(),s.c_str());
526         }
527         else
528         {
529                 // otherwise it comes from the user specified
530                 WriteTo(Source,Dest,'%s',s.c_str());
531         }
532 }
.fi
.PP
.SS "void Server::SendToModeMask (\fBstd::string\fP modes, int flags, \fBstd::string\fP text)\fC [virtual]\fP"
.PP
Sends to all users matching a mode mask You must specify one or more usermodes as the first parameter. 
.PP
These can be RFC specified modes such as +i, or module provided modes, including ones provided by your own module. In the second parameter you must place a flag value which indicates wether the modes you have given will be logically ANDed or OR'ed. You may use one of either WM_AND or WM_OR. for example, if you were to use:
.PP
Serv->SendToModeMask('xi', WM_OR, 'm00');
.PP
Then the text 'm00' will be sent to all users with EITHER mode x or i. Conversely if you used WM_AND, the user must have both modes set to receive the message.
.PP
Definition at line 438 of file modules.cpp.
.PP
.nf
439 {
440         WriteMode(modes.c_str(),flags,'%s',text.c_str());
441 }
.fi
.PP
.SS "void Server::SendWallops (\fBuserrec\fP * User, \fBstd::string\fP text)\fC [virtual]\fP"
.PP
Sends a WALLOPS message. 
.PP
This method writes a WALLOPS message to all users with the +w flag, originating from the specified user.
.PP
Definition at line 568 of file modules.cpp.
.PP
.nf
569 {
570         WriteWallOps(User,false,'%s',text.c_str());
571 }
.fi
.PP
.SS "bool Server::UserToPseudo (\fBuserrec\fP * user, \fBstd::string\fP message)\fC [virtual]\fP"
.PP
Remove a user's connection to the irc server, but leave their client in existence in the user hash. 
.PP
When you call this function, the user's file descriptor will be replaced with the value of FD_MAGIC_NUMBER and their old file descriptor will be closed. This idle client will remain until it is restored with a valid file descriptor, or is removed from IRC by an operator After this call, the pointer to user will be invalid.
.PP
Definition at line 677 of file modules.cpp.
.PP
References userrec::ClearBuffer(), DEBUG, connection::fd, FD_MAGIC_NUMBER, connection::host, and userrec::ident.
.PP
.nf
678 {
679         unsigned int old_fd = user->fd;
680         user->fd = FD_MAGIC_NUMBER;
681         user->ClearBuffer();
682         Write(old_fd,'ERROR :Closing link (%s@%s) [%s]',user->ident,user->host,message.c_str());
683 #ifdef USE_KQUEUE
684         struct kevent ke;
685         EV_SET(&ke, old_fd, EVFILT_READ, EV_DELETE, 0, 0, NULL);
686         int i = kevent(kq, &ke, 1, 0, 0, NULL);
687         if (i == -1)
688         {
689                 log(DEBUG,'kqueue: Failed to remove user from queue!');
690         }
691 #endif
692 #ifdef USE_EPOLL
693         struct epoll_event ev;
694         ev.events = EPOLLIN | EPOLLET;
695         ev.data.fd = old_fd;
696         int i = epoll_ctl(ep, EPOLL_CTL_DEL, old_fd, &ev);
697         if (i < 0)
698         {
699                 log(DEBUG,'epoll: List deletion failure!');
700         }
701 #endif
702 
703         shutdown(old_fd,2);
704         close(old_fd);
705         return true;
706 }
.fi
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
