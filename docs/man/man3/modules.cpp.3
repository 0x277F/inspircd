.TH "modules.cpp" 3 "19 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
modules.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'inspircd_config.h'\fP
.br
\fC#include 'inspircd.h'\fP
.br
\fC#include 'inspircd_io.h'\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/errno.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <string>\fP
.br
\fC#include <hash_map>\fP
.br
\fC#include <map>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <deque>\fP
.br
\fC#include 'users.h'\fP
.br
\fC#include 'ctables.h'\fP
.br
\fC#include 'globals.h'\fP
.br
\fC#include 'modules.h'\fP
.br
\fC#include 'dynamic.h'\fP
.br
\fC#include 'wildcard.h'\fP
.br
\fC#include 'message.h'\fP
.br
\fC#include 'mode.h'\fP
.br
\fC#include 'xline.h'\fP
.br
\fC#include 'commands.h'\fP
.br
\fC#include 'inspstring.h'\fP
.br
\fC#include 'helperfuncs.h'\fP
.br
\fC#include 'hashcomp.h'\fP
.br
\fC#include 'socket.h'\fP
.br
\fC#include 'socketengine.h'\fP
.br
\fC#include 'typedefs.h'\fP
.br
\fC#include 'command_parse.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBModeDefined\fP (char modechar, int type)"
.br
.ti -1c
.RI "bool \fBModeIsListMode\fP (char modechar, int type)"
.br
.ti -1c
.RI "bool \fBModeDefinedOper\fP (char modechar, int type)"
.br
.ti -1c
.RI "int \fBModeDefinedOn\fP (char modechar, int type)"
.br
.ti -1c
.RI "int \fBModeDefinedOff\fP (char modechar, int type)"
.br
.ti -1c
.RI "bool \fBDoAddExtendedMode\fP (char modechar, int type, bool requires_oper, int params_on, int params_off)"
.br
.ti -1c
.RI "void \fBModeMakeList\fP (char modechar)"
.br
.ti -1c
.RI "std::vector< \fBModule\fP * > \fBmodules\fP (255)"
.br
.ti -1c
.RI "std::vector< \fBircd_module\fP * > \fBfactory\fP (255)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBServerConfig\fP * \fBConfig\fP"
.br
.ti -1c
.RI "\fBInspIRCd\fP * \fBServerInstance\fP"
.br
.ti -1c
.RI "int \fBMODCOUNT\fP = -1"
.br
.ti -1c
.RI "std::vector< \fBModule\fP * > \fBmodules\fP"
.br
.ti -1c
.RI "std::vector< \fBircd_module\fP * > \fBfactory\fP"
.br
.ti -1c
.RI "std::vector< \fBInspSocket\fP * > \fBmodule_sockets\fP"
.br
.ti -1c
.RI "time_t \fBTIME\fP"
.br
.ti -1c
.RI "\fBuserrec\fP * \fBfd_ref_table\fP [65536]"
.br
.ti -1c
.RI "\fBuser_hash\fP \fBclientlist\fP"
.br
.ti -1c
.RI "\fBchan_hash\fP \fBchanlist\fP"
.br
.ti -1c
.RI "\fBcommand_table\fP \fBcmdlist\fP"
.br
.ti -1c
.RI "\fBExtModeList\fP \fBEMode\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool DoAddExtendedMode (char modechar, int type, bool requires_oper, int params_on, int params_off)"
.PP
Definition at line 133 of file modules.cpp.
.PP
References EMode, and ModeDefined().
.PP
Referenced by Server::AddExtendedListMode(), and Server::AddExtendedMode().
.PP
.nf
134 {
135         if (ModeDefined(modechar,type)) {
136                 return false;
137         }
138         EMode.push_back(ExtMode(modechar,type,requires_oper,params_on,params_off));
139         return true;
140 }
.fi
.PP
.SS "std::vector<\fBircd_module\fP*> factory (255)"
.PP
.SS "bool ModeDefined (char modechar, int type)"
.PP
Definition at line 70 of file modules.cpp.
.PP
References EMode.
.PP
Referenced by DoAddExtendedMode().
.PP
.nf
71 {
72         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
73         {
74                 if ((i->modechar == modechar) && (i->type == type))
75                 {
76                         return true;
77                 }
78         }
79         return false;
80 }
.fi
.PP
.SS "int ModeDefinedOff (char modechar, int type)"
.PP
Definition at line 120 of file modules.cpp.
.PP
References EMode.
.PP
.nf
121 {
122         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
123         {
124                 if ((i->modechar == modechar) && (i->type == type))
125                 {
126                         return i->params_when_off;
127                 }
128         }
129         return 0;
130 }
.fi
.PP
.SS "int ModeDefinedOn (char modechar, int type)"
.PP
Definition at line 107 of file modules.cpp.
.PP
References EMode.
.PP
.nf
108 {
109         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
110         {
111                 if ((i->modechar == modechar) && (i->type == type))
112                 {
113                         return i->params_when_on;
114                 }
115         }
116         return 0;
117 }
.fi
.PP
.SS "bool ModeDefinedOper (char modechar, int type)"
.PP
Definition at line 94 of file modules.cpp.
.PP
References EMode.
.PP
.nf
95 {
96         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
97         {
98                 if ((i->modechar == modechar) && (i->type == type) && (i->needsoper == true))
99                 {
100                         return true;
101                 }
102         }
103         return false;
104 }
.fi
.PP
.SS "bool ModeIsListMode (char modechar, int type)"
.PP
Definition at line 82 of file modules.cpp.
.PP
References EMode.
.PP
.nf
83 {
84         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
85         {
86                 if ((i->modechar == modechar) && (i->type == type) && (i->list == true))
87                 {
88                         return true;
89                 }
90         }
91         return false;
92 }
.fi
.PP
.SS "void ModeMakeList (char modechar)"
.PP
Definition at line 143 of file modules.cpp.
.PP
References EMode, and MT_CHANNEL.
.PP
Referenced by Server::AddExtendedListMode().
.PP
.nf
144 {
145         for (ExtModeListIter i = EMode.begin(); i < EMode.end(); i++)
146         {
147                 if ((i->modechar == modechar) && (i->type == MT_CHANNEL))
148                 {
149                         i->list = true;
150                         return;
151                 }
152         }
153         return;
154 }
.fi
.PP
.SS "std::vector<\fBModule\fP*> modules (255)"
.PP
.SH "Variable Documentation"
.PP 
.SS "\fBchan_hash\fP \fBchanlist\fP"
.PP
.SS "\fBuser_hash\fP \fBclientlist\fP"
.PP
Referenced by AddClient(), kill_link(), kill_link_silent(), and ReHashNick().
.SS "\fBcommand_table\fP \fBcmdlist\fP"
.PP
.SS "\fBServerConfig\fP* \fBConfig\fP"
.PP
.SS "\fBExtModeList\fP \fBEMode\fP"
.PP
Definition at line 67 of file modules.cpp.
.PP
Referenced by DoAddExtendedMode(), ModeDefined(), ModeDefinedOff(), ModeDefinedOn(), ModeDefinedOper(), ModeIsListMode(), and ModeMakeList().
.SS "std::vector<\fBircd_module\fP*> factory"
.PP
.SS "\fBuserrec\fP* \fBfd_ref_table\fP[65536]"
.PP
.SS "int \fBMODCOUNT\fP = -1"
.PP
Definition at line 934 of file modules.cpp.
.SS "std::vector<\fBInspSocket\fP*> \fBmodule_sockets\fP"
.PP
Referenced by Server::AddSocket(), and Server::DelSocket().
.SS "std::vector<\fBModule\fP*> modules"
.PP
.SS "\fBInspIRCd\fP* \fBServerInstance\fP"
.PP
.SS "time_t \fBTIME\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
