.TH "ConfigReader" 3 "15 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (\fBstd::string\fP filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBReadValue\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (\fBstd::string\fP tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (\fBstd::string\fP tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read.
.PP
Definition at line 1532 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. 
.PP
This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.
.PP
Definition at line 736 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
737 {
738         Config->ClearStack();
739         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
740         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
741         this->readerror = Config->LoadConf(CONFIG_FILE,this->cache,this->errorlog);
742         if (!this->readerror)
743                 this->error = CONF_FILE_NOT_FOUND;
744 }
.fi
.PP
.SS "ConfigReader::ConfigReader (\fBstd::string\fP filename)"
.PP
Overloaded constructor. 
.PP
This constructor initialises the ConfigReader class to read a user-specified config file
.PP
Definition at line 756 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
757 {
758         Config->ClearStack();
759         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
760         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
761         this->readerror = Config->LoadConf(filename.c_str(),this->cache,this->errorlog);
762         if (!this->readerror)
763                 this->error = CONF_FILE_NOT_FOUND;
764 };
.fi
.PP
.SS "ConfigReader::~ConfigReader ()"
.PP
Default destructor. 
.PP
This method destroys the ConfigReader class.
.PP
Definition at line 747 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
748 {
749         if (this->cache)
750                 delete this->cache;
751         if (this->errorlog)
752                 delete this->errorlog;
753 }
.fi
.PP
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. 
.PP
If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.
.PP
Definition at line 835 of file modules.cpp.
.PP
References errorlog, connection::fd, userrec::nick, WriteOpers(), and WriteServ().
.PP
.nf
836 {
837         if (bail)
838         {
839                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
840                 exit(0);
841         }
842         else
843         {
844                 char dataline[1024];
845                 if (user)
846                 {
847                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
848                         while (!errorlog->eof())
849                         {
850                                 errorlog->getline(dataline,1024);
851                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
852                         }
853                 }
854                 else
855                 {
856                         WriteOpers('There were errors in the configuration file:',user->nick);
857                         while (!errorlog->eof())
858                         {
859                                 errorlog->getline(dataline,1024);
860                                 WriteOpers(dataline);
861                         }
862                 }
863                 return;
864         }
865 }
.fi
.PP
.SS "int ConfigReader::Enumerate (\fBstd::string\fP tag)"
.PP
Counts the number of times a given tag appears in the config file. 
.PP
This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.
.PP
Definition at line 868 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumConf().
.PP
.nf
869 {
870         return Config->EnumConf(cache,tag.c_str());
871 }
.fi
.PP
.SS "int ConfigReader::EnumerateValues (\fBstd::string\fP tag, int index)"
.PP
Returns the number of items within a tag. 
.PP
For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.
.PP
Definition at line 873 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumValues().
.PP
.nf
874 {
875         return Config->EnumValues(cache, tag.c_str(), index);
876 }
.fi
.PP
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. 
.PP
Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.
.PP
Definition at line 828 of file modules.cpp.
.PP
References error.
.PP
.nf
829 {
830         long olderr = this->error;
831         this->error = 0;
832         return olderr;
833 }
.fi
.PP
.SS "bool ConfigReader::ReadFlag (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a boolean value from the config file. 
.PP
This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.
.PP
Definition at line 782 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
783 {
784         char val[MAXBUF];
785         char t[MAXBUF];
786         char n[MAXBUF];
787         strlcpy(t,tag.c_str(),MAXBUF);
788         strlcpy(n,name.c_str(),MAXBUF);
789         int res = Config->ReadConf(cache,t,n,index,val);
790         if (!res)
791         {
792                 this->error = CONF_VALUE_NOT_FOUND;
793                 return false;
794         }
795         std::string s = val;
796         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
797 }
.fi
.PP
.SS "long ConfigReader::ReadInteger (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. 
.PP
This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNED
.PP
Definition at line 799 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
800 {
801         char val[MAXBUF];
802         char t[MAXBUF];
803         char n[MAXBUF];
804         strlcpy(t,tag.c_str(),MAXBUF);
805         strlcpy(n,name.c_str(),MAXBUF);
806         int res = Config->ReadConf(cache,t,n,index,val);
807         if (!res)
808         {
809                 this->error = CONF_VALUE_NOT_FOUND;
810                 return 0;
811         }
812         for (unsigned int i = 0; i < strlen(val); i++)
813         {
814                 if (!isdigit(val[i]))
815                 {
816                         this->error = CONF_NOT_A_NUMBER;
817                         return 0;
818                 }
819         }
820         if ((needs_unsigned) && (atoi(val)<0))
821         {
822                 this->error = CONF_NOT_UNSIGNED;
823                 return 0;
824         }
825         return atoi(val);
826 }
.fi
.PP
.SS "\fBstd::string\fP ConfigReader::ReadValue (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a value from the config file. 
.PP
This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.
.PP
Definition at line 766 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
767 {
768         char val[MAXBUF];
769         char t[MAXBUF];
770         char n[MAXBUF];
771         strlcpy(t,tag.c_str(),MAXBUF);
772         strlcpy(n,name.c_str(),MAXBUF);
773         int res = Config->ReadConf(cache,t,n,index,val);
774         if (!res)
775         {
776                 this->error = CONF_VALUE_NOT_FOUND;
777                 return '';
778         }
779         return val;
780 }
.fi
.PP
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. 
.PP
This method is partially implemented and will only return false if the config file does not exist or could not be opened.
.PP
Definition at line 878 of file modules.cpp.
.PP
References readerror.
.PP
.nf
879 {
880         return this->readerror;
881 }
.fi
.PP
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). 
.PP
It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.
.PP
Definition at line 1540 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1545 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1541 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. 
.PP
Definition at line 1544 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
