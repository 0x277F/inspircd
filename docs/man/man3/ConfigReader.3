.TH "ConfigReader" 3 "15 May 2005" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (std::string filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "std::string \fBReadValue\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (std::string tag, std::string name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (std::string tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (std::string tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read. 
.PP
Definition at line 1150 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.Definition at line 799 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
800 {
801         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
802         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
803         this->readerror = LoadConf(CONFIG_FILE,this->cache,this->errorlog);
804         if (!this->readerror)
805                 this->error = CONF_FILE_NOT_FOUND;
806 }
.fi
.SS "ConfigReader::ConfigReader (std::string filename)"
.PP
Overloaded constructor. This constructor initialises the ConfigReader class to read a user-specified config fileDefinition at line 818 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
819 {
820         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
821         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
822         this->readerror = LoadConf(filename.c_str(),this->cache,this->errorlog);
823         if (!this->readerror)
824                 this->error = CONF_FILE_NOT_FOUND;
825 };
.fi
.SS "ConfigReader::~\fBConfigReader\fP ()"
.PP
Default destructor. This method destroys the ConfigReader class.Definition at line 809 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
810 {
811         if (this->cache)
812                 delete this->cache;
813         if (this->errorlog)
814                 delete this->errorlog;
815 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.Definition at line 896 of file modules.cpp.
.PP
References errorlog, connection::fd, and userrec::nick.
.PP
.nf
897 {
898         if (bail)
899         {
900                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
901                 exit(0);
902         }
903         else
904         {
905                 char dataline[1024];
906                 if (user)
907                 {
908                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
909                         while (!errorlog->eof())
910                         {
911                                 errorlog->getline(dataline,1024);
912                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
913                         }
914                 }
915                 else
916                 {
917                         WriteOpers('There were errors in the configuration file:',user->nick);
918                         while (!errorlog->eof())
919                         {
920                                 errorlog->getline(dataline,1024);
921                                 WriteOpers(dataline);
922                         }
923                 }
924                 return;
925         }
926 }
.fi
.SS "int ConfigReader::Enumerate (std::string tag)"
.PP
Counts the number of times a given tag appears in the config file. This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.Definition at line 929 of file modules.cpp.
.PP
References cache.
.PP
.nf
930 {
931         return EnumConf(cache,tag.c_str());
932 }
.fi
.SS "int ConfigReader::EnumerateValues (std::string tag, int index)"
.PP
Returns the number of items within a tag. For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.Definition at line 934 of file modules.cpp.
.PP
References cache.
.PP
.nf
935 {
936         return EnumValues(cache, tag.c_str(), index);
937 }
.fi
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.Definition at line 889 of file modules.cpp.
.PP
References error.
.PP
.nf
890 {
891         long olderr = this->error;
892         this->error = 0;
893         return olderr;
894 }
.fi
.SS "bool ConfigReader::ReadFlag (std::string tag, std::string name, int index)"
.PP
Retrieves a boolean value from the config file. This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.Definition at line 843 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
844 {
845         char val[MAXBUF];
846         char t[MAXBUF];
847         char n[MAXBUF];
848         strlcpy(t,tag.c_str(),MAXBUF);
849         strlcpy(n,name.c_str(),MAXBUF);
850         int res = ReadConf(cache,t,n,index,val);
851         if (!res)
852         {
853                 this->error = CONF_VALUE_NOT_FOUND;
854                 return false;
855         }
856         std::string s = val;
857         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
858 }
.fi
.SS "long ConfigReader::ReadInteger (std::string tag, std::string name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNEDDefinition at line 860 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
861 {
862         char val[MAXBUF];
863         char t[MAXBUF];
864         char n[MAXBUF];
865         strlcpy(t,tag.c_str(),MAXBUF);
866         strlcpy(n,name.c_str(),MAXBUF);
867         int res = ReadConf(cache,t,n,index,val);
868         if (!res)
869         {
870                 this->error = CONF_VALUE_NOT_FOUND;
871                 return 0;
872         }
873         for (int i = 0; i < strlen(val); i++)
874         {
875                 if (!isdigit(val[i]))
876                 {
877                         this->error = CONF_NOT_A_NUMBER;
878                         return 0;
879                 }
880         }
881         if ((needs_unsigned) && (atoi(val)<0))
882         {
883                 this->error = CONF_NOT_UNSIGNED;
884                 return 0;
885         }
886         return atoi(val);
887 }
.fi
.SS "std::string ConfigReader::ReadValue (std::string tag, std::string name, int index)"
.PP
Retrieves a value from the config file. This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.Definition at line 827 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
828 {
829         char val[MAXBUF];
830         char t[MAXBUF];
831         char n[MAXBUF];
832         strlcpy(t,tag.c_str(),MAXBUF);
833         strlcpy(n,name.c_str(),MAXBUF);
834         int res = ReadConf(cache,t,n,index,val);
835         if (!res)
836         {
837                 this->error = CONF_VALUE_NOT_FOUND;
838                 return '';
839         }
840         return val;
841 }
.fi
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. This method is partially implemented and will only return false if the config file does not exist or could not be opened.Definition at line 939 of file modules.cpp.
.PP
References readerror.
.PP
.nf
940 {
941         return this->readerror;
942 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.Definition at line 1158 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1163 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1159 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. Definition at line 1162 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
