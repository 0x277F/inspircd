.TH "ConfigReader" 3 "20 Apr 2005" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (std::string filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "std::string \fBReadValue\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (std::string tag, std::string name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (std::string tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (std::string tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read. 
.PP
Definition at line 1072 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.Definition at line 833 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
834 {
835         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
836         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
837         this->readerror = LoadConf(CONFIG_FILE,this->cache,this->errorlog);
838         if (!this->readerror)
839                 this->error = CONF_FILE_NOT_FOUND;
840 }
.fi
.SS "ConfigReader::ConfigReader (std::string filename)"
.PP
Overloaded constructor. This constructor initialises the ConfigReader class to read a user-specified config fileDefinition at line 852 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
853 {
854         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
855         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
856         this->readerror = LoadConf(filename.c_str(),this->cache,this->errorlog);
857         if (!this->readerror)
858                 this->error = CONF_FILE_NOT_FOUND;
859 };
.fi
.SS "ConfigReader::~\fBConfigReader\fP ()"
.PP
Default destructor. This method destroys the ConfigReader class.Definition at line 843 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
844 {
845         if (this->cache)
846                 delete this->cache;
847         if (this->errorlog)
848                 delete this->errorlog;
849 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.Definition at line 930 of file modules.cpp.
.PP
References errorlog, connection::fd, and userrec::nick.
.PP
.nf
931 {
932         if (bail)
933         {
934                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
935                 exit(0);
936         }
937         else
938         {
939                 char dataline[1024];
940                 if (user)
941                 {
942                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
943                         while (!errorlog->eof())
944                         {
945                                 errorlog->getline(dataline,1024);
946                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
947                         }
948                 }
949                 else
950                 {
951                         WriteOpers('There were errors in the configuration file:',user->nick);
952                         while (!errorlog->eof())
953                         {
954                                 errorlog->getline(dataline,1024);
955                                 WriteOpers(dataline);
956                         }
957                 }
958                 return;
959         }
960 }
.fi
.SS "int ConfigReader::Enumerate (std::string tag)"
.PP
Counts the number of times a given tag appears in the config file. This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.Definition at line 963 of file modules.cpp.
.PP
References cache.
.PP
.nf
964 {
965         return EnumConf(cache,tag.c_str());
966 }
.fi
.SS "int ConfigReader::EnumerateValues (std::string tag, int index)"
.PP
Returns the number of items within a tag. For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.Definition at line 968 of file modules.cpp.
.PP
References cache.
.PP
.nf
969 {
970         return EnumValues(cache, tag.c_str(), index);
971 }
.fi
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.Definition at line 923 of file modules.cpp.
.PP
References error.
.PP
.nf
924 {
925         long olderr = this->error;
926         this->error = 0;
927         return olderr;
928 }
.fi
.SS "bool ConfigReader::ReadFlag (std::string tag, std::string name, int index)"
.PP
Retrieves a boolean value from the config file. This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.Definition at line 877 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
878 {
879         char val[MAXBUF];
880         char t[MAXBUF];
881         char n[MAXBUF];
882         strlcpy(t,tag.c_str(),MAXBUF);
883         strlcpy(n,name.c_str(),MAXBUF);
884         int res = ReadConf(cache,t,n,index,val);
885         if (!res)
886         {
887                 this->error = CONF_VALUE_NOT_FOUND;
888                 return false;
889         }
890         std::string s = val;
891         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
892 }
.fi
.SS "long ConfigReader::ReadInteger (std::string tag, std::string name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNEDDefinition at line 894 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
895 {
896         char val[MAXBUF];
897         char t[MAXBUF];
898         char n[MAXBUF];
899         strlcpy(t,tag.c_str(),MAXBUF);
900         strlcpy(n,name.c_str(),MAXBUF);
901         int res = ReadConf(cache,t,n,index,val);
902         if (!res)
903         {
904                 this->error = CONF_VALUE_NOT_FOUND;
905                 return 0;
906         }
907         for (int i = 0; i < strlen(val); i++)
908         {
909                 if (!isdigit(val[i]))
910                 {
911                         this->error = CONF_NOT_A_NUMBER;
912                         return 0;
913                 }
914         }
915         if ((needs_unsigned) && (atoi(val)<0))
916         {
917                 this->error = CONF_NOT_UNSIGNED;
918                 return 0;
919         }
920         return atoi(val);
921 }
.fi
.SS "std::string ConfigReader::ReadValue (std::string tag, std::string name, int index)"
.PP
Retrieves a value from the config file. This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.Definition at line 861 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
862 {
863         char val[MAXBUF];
864         char t[MAXBUF];
865         char n[MAXBUF];
866         strlcpy(t,tag.c_str(),MAXBUF);
867         strlcpy(n,name.c_str(),MAXBUF);
868         int res = ReadConf(cache,t,n,index,val);
869         if (!res)
870         {
871                 this->error = CONF_VALUE_NOT_FOUND;
872                 return '';
873         }
874         return std::string(val);
875 }
.fi
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. This method is partially implemented and will only return false if the config file does not exist or could not be opened.Definition at line 973 of file modules.cpp.
.PP
References readerror.
.PP
.nf
974 {
975         return this->readerror;
976 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.Definition at line 1080 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1085 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1081 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. Definition at line 1084 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
