.TH "ConfigReader" 3 "12 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (\fBstd::string\fP filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBReadValue\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (\fBstd::string\fP tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (\fBstd::string\fP tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read.
.PP
Definition at line 1510 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. 
.PP
This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.
.PP
Definition at line 807 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, include_stack, and readerror.
.PP
.nf
808 {
809         include_stack.clear();
810         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
811         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
812         this->readerror = LoadConf(CONFIG_FILE,this->cache,this->errorlog);
813         if (!this->readerror)
814                 this->error = CONF_FILE_NOT_FOUND;
815 }
.fi
.PP
.SS "ConfigReader::ConfigReader (\fBstd::string\fP filename)"
.PP
Overloaded constructor. 
.PP
This constructor initialises the ConfigReader class to read a user-specified config file
.PP
Definition at line 827 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
828 {
829         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
830         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
831         this->readerror = LoadConf(filename.c_str(),this->cache,this->errorlog);
832         if (!this->readerror)
833                 this->error = CONF_FILE_NOT_FOUND;
834 };
.fi
.PP
.SS "ConfigReader::~ConfigReader ()"
.PP
Default destructor. 
.PP
This method destroys the ConfigReader class.
.PP
Definition at line 818 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
819 {
820         if (this->cache)
821                 delete this->cache;
822         if (this->errorlog)
823                 delete this->errorlog;
824 }
.fi
.PP
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. 
.PP
If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.
.PP
Definition at line 905 of file modules.cpp.
.PP
References errorlog, connection::fd, and userrec::nick.
.PP
.nf
906 {
907         if (bail)
908         {
909                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
910                 exit(0);
911         }
912         else
913         {
914                 char dataline[1024];
915                 if (user)
916                 {
917                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
918                         while (!errorlog->eof())
919                         {
920                                 errorlog->getline(dataline,1024);
921                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
922                         }
923                 }
924                 else
925                 {
926                         WriteOpers('There were errors in the configuration file:',user->nick);
927                         while (!errorlog->eof())
928                         {
929                                 errorlog->getline(dataline,1024);
930                                 WriteOpers(dataline);
931                         }
932                 }
933                 return;
934         }
935 }
.fi
.PP
.SS "int ConfigReader::Enumerate (\fBstd::string\fP tag)"
.PP
Counts the number of times a given tag appears in the config file. 
.PP
This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.
.PP
Definition at line 938 of file modules.cpp.
.PP
References cache.
.PP
.nf
939 {
940         return EnumConf(cache,tag.c_str());
941 }
.fi
.PP
.SS "int ConfigReader::EnumerateValues (\fBstd::string\fP tag, int index)"
.PP
Returns the number of items within a tag. 
.PP
For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.
.PP
Definition at line 943 of file modules.cpp.
.PP
References cache.
.PP
.nf
944 {
945         return EnumValues(cache, tag.c_str(), index);
946 }
.fi
.PP
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. 
.PP
Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.
.PP
Definition at line 898 of file modules.cpp.
.PP
References error.
.PP
.nf
899 {
900         long olderr = this->error;
901         this->error = 0;
902         return olderr;
903 }
.fi
.PP
.SS "bool ConfigReader::ReadFlag (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a boolean value from the config file. 
.PP
This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.
.PP
Definition at line 852 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
853 {
854         char val[MAXBUF];
855         char t[MAXBUF];
856         char n[MAXBUF];
857         strlcpy(t,tag.c_str(),MAXBUF);
858         strlcpy(n,name.c_str(),MAXBUF);
859         int res = ReadConf(cache,t,n,index,val);
860         if (!res)
861         {
862                 this->error = CONF_VALUE_NOT_FOUND;
863                 return false;
864         }
865         std::string s = val;
866         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
867 }
.fi
.PP
.SS "long ConfigReader::ReadInteger (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. 
.PP
This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNED
.PP
Definition at line 869 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
870 {
871         char val[MAXBUF];
872         char t[MAXBUF];
873         char n[MAXBUF];
874         strlcpy(t,tag.c_str(),MAXBUF);
875         strlcpy(n,name.c_str(),MAXBUF);
876         int res = ReadConf(cache,t,n,index,val);
877         if (!res)
878         {
879                 this->error = CONF_VALUE_NOT_FOUND;
880                 return 0;
881         }
882         for (unsigned int i = 0; i < strlen(val); i++)
883         {
884                 if (!isdigit(val[i]))
885                 {
886                         this->error = CONF_NOT_A_NUMBER;
887                         return 0;
888                 }
889         }
890         if ((needs_unsigned) && (atoi(val)<0))
891         {
892                 this->error = CONF_NOT_UNSIGNED;
893                 return 0;
894         }
895         return atoi(val);
896 }
.fi
.PP
.SS "\fBstd::string\fP ConfigReader::ReadValue (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a value from the config file. 
.PP
This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.
.PP
Definition at line 836 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
837 {
838         char val[MAXBUF];
839         char t[MAXBUF];
840         char n[MAXBUF];
841         strlcpy(t,tag.c_str(),MAXBUF);
842         strlcpy(n,name.c_str(),MAXBUF);
843         int res = ReadConf(cache,t,n,index,val);
844         if (!res)
845         {
846                 this->error = CONF_VALUE_NOT_FOUND;
847                 return '';
848         }
849         return val;
850 }
.fi
.PP
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. 
.PP
This method is partially implemented and will only return false if the config file does not exist or could not be opened.
.PP
Definition at line 948 of file modules.cpp.
.PP
References readerror.
.PP
.nf
949 {
950         return this->readerror;
951 }
.fi
.PP
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). 
.PP
It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.
.PP
Definition at line 1518 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1523 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1519 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. 
.PP
Definition at line 1522 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
