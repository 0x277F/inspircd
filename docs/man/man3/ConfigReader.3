.TH "ConfigReader" 3 "14 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (\fBstd::string\fP filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBReadValue\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (\fBstd::string\fP tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (\fBstd::string\fP tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read.
.PP
Definition at line 1529 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. 
.PP
This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.
.PP
Definition at line 731 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
732 {
733         Config->ClearStack();
734         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
735         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
736         this->readerror = Config->LoadConf(CONFIG_FILE,this->cache,this->errorlog);
737         if (!this->readerror)
738                 this->error = CONF_FILE_NOT_FOUND;
739 }
.fi
.PP
.SS "ConfigReader::ConfigReader (\fBstd::string\fP filename)"
.PP
Overloaded constructor. 
.PP
This constructor initialises the ConfigReader class to read a user-specified config file
.PP
Definition at line 751 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
752 {
753         Config->ClearStack();
754         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
755         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
756         this->readerror = Config->LoadConf(filename.c_str(),this->cache,this->errorlog);
757         if (!this->readerror)
758                 this->error = CONF_FILE_NOT_FOUND;
759 };
.fi
.PP
.SS "ConfigReader::~ConfigReader ()"
.PP
Default destructor. 
.PP
This method destroys the ConfigReader class.
.PP
Definition at line 742 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
743 {
744         if (this->cache)
745                 delete this->cache;
746         if (this->errorlog)
747                 delete this->errorlog;
748 }
.fi
.PP
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. 
.PP
If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.
.PP
Definition at line 830 of file modules.cpp.
.PP
References errorlog, connection::fd, userrec::nick, WriteOpers(), and WriteServ().
.PP
.nf
831 {
832         if (bail)
833         {
834                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
835                 exit(0);
836         }
837         else
838         {
839                 char dataline[1024];
840                 if (user)
841                 {
842                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
843                         while (!errorlog->eof())
844                         {
845                                 errorlog->getline(dataline,1024);
846                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
847                         }
848                 }
849                 else
850                 {
851                         WriteOpers('There were errors in the configuration file:',user->nick);
852                         while (!errorlog->eof())
853                         {
854                                 errorlog->getline(dataline,1024);
855                                 WriteOpers(dataline);
856                         }
857                 }
858                 return;
859         }
860 }
.fi
.PP
.SS "int ConfigReader::Enumerate (\fBstd::string\fP tag)"
.PP
Counts the number of times a given tag appears in the config file. 
.PP
This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.
.PP
Definition at line 863 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumConf().
.PP
.nf
864 {
865         return Config->EnumConf(cache,tag.c_str());
866 }
.fi
.PP
.SS "int ConfigReader::EnumerateValues (\fBstd::string\fP tag, int index)"
.PP
Returns the number of items within a tag. 
.PP
For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.
.PP
Definition at line 868 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumValues().
.PP
.nf
869 {
870         return Config->EnumValues(cache, tag.c_str(), index);
871 }
.fi
.PP
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. 
.PP
Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.
.PP
Definition at line 823 of file modules.cpp.
.PP
References error.
.PP
.nf
824 {
825         long olderr = this->error;
826         this->error = 0;
827         return olderr;
828 }
.fi
.PP
.SS "bool ConfigReader::ReadFlag (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a boolean value from the config file. 
.PP
This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.
.PP
Definition at line 777 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
778 {
779         char val[MAXBUF];
780         char t[MAXBUF];
781         char n[MAXBUF];
782         strlcpy(t,tag.c_str(),MAXBUF);
783         strlcpy(n,name.c_str(),MAXBUF);
784         int res = Config->ReadConf(cache,t,n,index,val);
785         if (!res)
786         {
787                 this->error = CONF_VALUE_NOT_FOUND;
788                 return false;
789         }
790         std::string s = val;
791         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
792 }
.fi
.PP
.SS "long ConfigReader::ReadInteger (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. 
.PP
This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNED
.PP
Definition at line 794 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
795 {
796         char val[MAXBUF];
797         char t[MAXBUF];
798         char n[MAXBUF];
799         strlcpy(t,tag.c_str(),MAXBUF);
800         strlcpy(n,name.c_str(),MAXBUF);
801         int res = Config->ReadConf(cache,t,n,index,val);
802         if (!res)
803         {
804                 this->error = CONF_VALUE_NOT_FOUND;
805                 return 0;
806         }
807         for (unsigned int i = 0; i < strlen(val); i++)
808         {
809                 if (!isdigit(val[i]))
810                 {
811                         this->error = CONF_NOT_A_NUMBER;
812                         return 0;
813                 }
814         }
815         if ((needs_unsigned) && (atoi(val)<0))
816         {
817                 this->error = CONF_NOT_UNSIGNED;
818                 return 0;
819         }
820         return atoi(val);
821 }
.fi
.PP
.SS "\fBstd::string\fP ConfigReader::ReadValue (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a value from the config file. 
.PP
This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.
.PP
Definition at line 761 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
762 {
763         char val[MAXBUF];
764         char t[MAXBUF];
765         char n[MAXBUF];
766         strlcpy(t,tag.c_str(),MAXBUF);
767         strlcpy(n,name.c_str(),MAXBUF);
768         int res = Config->ReadConf(cache,t,n,index,val);
769         if (!res)
770         {
771                 this->error = CONF_VALUE_NOT_FOUND;
772                 return '';
773         }
774         return val;
775 }
.fi
.PP
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. 
.PP
This method is partially implemented and will only return false if the config file does not exist or could not be opened.
.PP
Definition at line 873 of file modules.cpp.
.PP
References readerror.
.PP
.nf
874 {
875         return this->readerror;
876 }
.fi
.PP
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). 
.PP
It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.
.PP
Definition at line 1537 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1542 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1538 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. 
.PP
Definition at line 1541 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
