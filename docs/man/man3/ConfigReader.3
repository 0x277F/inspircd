.TH "ConfigReader" 3 "9 Apr 2005" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (std::string filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "std::string \fBReadValue\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (std::string tag, std::string name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (std::string tag, std::string name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (std::string tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (std::string tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read. 
.PP
Definition at line 683 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.Definition at line 579 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
580 {
581         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
582         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
583         this->readerror = LoadConf(CONFIG_FILE,this->cache,this->errorlog);
584         if (!this->readerror)
585                 this->error = CONF_FILE_NOT_FOUND;
586 }
.fi
.SS "ConfigReader::ConfigReader (std::string filename)"
.PP
Overloaded constructor. This constructor initialises the ConfigReader class to read a user-specified config fileDefinition at line 598 of file modules.cpp.
.PP
References cache, CONF_FILE_NOT_FOUND, error, errorlog, and readerror.
.PP
.nf
599 {
600         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
601         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
602         this->readerror = LoadConf(filename.c_str(),this->cache,this->errorlog);
603         if (!this->readerror)
604                 this->error = CONF_FILE_NOT_FOUND;
605 };
.fi
.SS "ConfigReader::~\fBConfigReader\fP ()"
.PP
Default destructor. This method destroys the ConfigReader class.Definition at line 589 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
590 {
591         if (this->cache)
592                 delete this->cache;
593         if (this->errorlog)
594                 delete this->errorlog;
595 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.Definition at line 676 of file modules.cpp.
.PP
References errorlog, connection::fd, and userrec::nick.
.PP
.nf
677 {
678         if (bail)
679         {
680                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
681                 exit(0);
682         }
683         else
684         {
685                 char dataline[1024];
686                 if (user)
687                 {
688                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
689                         while (!errorlog->eof())
690                         {
691                                 errorlog->getline(dataline,1024);
692                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
693                         }
694                 }
695                 else
696                 {
697                         WriteOpers('There were errors in the configuration file:',user->nick);
698                         while (!errorlog->eof())
699                         {
700                                 errorlog->getline(dataline,1024);
701                                 WriteOpers(dataline);
702                         }
703                 }
704                 return;
705         }
706 }
.fi
.SS "int ConfigReader::Enumerate (std::string tag)"
.PP
Counts the number of times a given tag appears in the config file. This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.Definition at line 709 of file modules.cpp.
.PP
References cache.
.PP
.nf
710 {
711         return EnumConf(cache,tag.c_str());
712 }
.fi
.SS "int ConfigReader::EnumerateValues (std::string tag, int index)"
.PP
Returns the number of items within a tag. For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.Definition at line 714 of file modules.cpp.
.PP
References cache.
.PP
.nf
715 {
716         return EnumValues(cache, tag.c_str(), index);
717 }
.fi
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.Definition at line 669 of file modules.cpp.
.PP
References error.
.PP
.nf
670 {
671         long olderr = this->error;
672         this->error = 0;
673         return olderr;
674 }
.fi
.SS "bool ConfigReader::ReadFlag (std::string tag, std::string name, int index)"
.PP
Retrieves a boolean value from the config file. This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.Definition at line 623 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
624 {
625         char val[MAXBUF];
626         char t[MAXBUF];
627         char n[MAXBUF];
628         strlcpy(t,tag.c_str(),MAXBUF);
629         strlcpy(n,name.c_str(),MAXBUF);
630         int res = ReadConf(cache,t,n,index,val);
631         if (!res)
632         {
633                 this->error = CONF_VALUE_NOT_FOUND;
634                 return false;
635         }
636         std::string s = val;
637         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
638 }
.fi
.SS "long ConfigReader::ReadInteger (std::string tag, std::string name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNEDDefinition at line 640 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
641 {
642         char val[MAXBUF];
643         char t[MAXBUF];
644         char n[MAXBUF];
645         strlcpy(t,tag.c_str(),MAXBUF);
646         strlcpy(n,name.c_str(),MAXBUF);
647         int res = ReadConf(cache,t,n,index,val);
648         if (!res)
649         {
650                 this->error = CONF_VALUE_NOT_FOUND;
651                 return 0;
652         }
653         for (int i = 0; i < strlen(val); i++)
654         {
655                 if (!isdigit(val[i]))
656                 {
657                         this->error = CONF_NOT_A_NUMBER;
658                         return 0;
659                 }
660         }
661         if ((needs_unsigned) && (atoi(val)<0))
662         {
663                 this->error = CONF_NOT_UNSIGNED;
664                 return 0;
665         }
666         return atoi(val);
667 }
.fi
.SS "std::string ConfigReader::ReadValue (std::string tag, std::string name, int index)"
.PP
Retrieves a value from the config file. This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.Definition at line 607 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, and error.
.PP
.nf
608 {
609         char val[MAXBUF];
610         char t[MAXBUF];
611         char n[MAXBUF];
612         strlcpy(t,tag.c_str(),MAXBUF);
613         strlcpy(n,name.c_str(),MAXBUF);
614         int res = ReadConf(cache,t,n,index,val);
615         if (!res)
616         {
617                 this->error = CONF_VALUE_NOT_FOUND;
618                 return '';
619         }
620         return std::string(val);
621 }
.fi
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. This method is partially implemented and will only return false if the config file does not exist or could not be opened.Definition at line 719 of file modules.cpp.
.PP
References readerror.
.PP
.nf
720 {
721         return this->readerror;
722 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.Definition at line 691 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 696 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 692 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. Definition at line 695 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
