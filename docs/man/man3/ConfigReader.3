.TH "ConfigReader" 3 "19 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigReader \- Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigReader\fP ()"
.br
.RI "\fIDefault constructor. \fP"
.ti -1c
.RI "\fBConfigReader\fP (\fBstd::string\fP filename)"
.br
.RI "\fIOverloaded constructor. \fP"
.ti -1c
.RI "\fB~ConfigReader\fP ()"
.br
.RI "\fIDefault destructor. \fP"
.ti -1c
.RI "\fBstd::string\fP \fBReadValue\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a value from the config file. \fP"
.ti -1c
.RI "bool \fBReadFlag\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.br
.RI "\fIRetrieves a boolean value from the config file. \fP"
.ti -1c
.RI "long \fBReadInteger\fP (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.br
.RI "\fIRetrieves an integer value from the config file. \fP"
.ti -1c
.RI "long \fBGetError\fP ()"
.br
.RI "\fIReturns the last error to occur. \fP"
.ti -1c
.RI "int \fBEnumerate\fP (\fBstd::string\fP tag)"
.br
.RI "\fICounts the number of times a given tag appears in the config file. \fP"
.ti -1c
.RI "bool \fBVerify\fP ()"
.br
.RI "\fIReturns true if a config file is valid. \fP"
.ti -1c
.RI "void \fBDumpErrors\fP (bool bail, \fBuserrec\fP *user)"
.br
.RI "\fIDumps the list of errors in a config file to an output location. \fP"
.ti -1c
.RI "int \fBEnumerateValues\fP (\fBstd::string\fP tag, int index)"
.br
.RI "\fIReturns the number of items within a tag. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::stringstream * \fBcache\fP"
.br
.RI "\fIThe contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). \fP"
.ti -1c
.RI "std::stringstream * \fBerrorlog\fP"
.br
.ti -1c
.RI "bool \fBreaderror\fP"
.br
.RI "\fIUsed to store errors. \fP"
.ti -1c
.RI "long \fBerror\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows reading of values from configuration files This class allows a module to read from either the main configuration file (inspircd.conf) or from a module-specified configuration file. 

It may either be instantiated with one parameter or none. Constructing the class using one parameter allows you to specify a path to your own configuration file, otherwise, inspircd.conf is read.
.PP
Definition at line 1550 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigReader::ConfigReader ()"
.PP
Default constructor. 
.PP
This constructor initialises the ConfigReader class to read the inspircd.conf file as specified when running ./configure.
.PP
Definition at line 735 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
736 {
737         Config->ClearStack();
738         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
739         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
740         this->readerror = Config->LoadConf(CONFIG_FILE,this->cache,this->errorlog);
741         if (!this->readerror)
742                 this->error = CONF_FILE_NOT_FOUND;
743 }
.fi
.PP
.SS "ConfigReader::ConfigReader (\fBstd::string\fP filename)"
.PP
Overloaded constructor. 
.PP
This constructor initialises the ConfigReader class to read a user-specified config file
.PP
Definition at line 755 of file modules.cpp.
.PP
References cache, ServerConfig::ClearStack(), CONF_FILE_NOT_FOUND, error, errorlog, ServerConfig::LoadConf(), and readerror.
.PP
.nf
756 {
757         Config->ClearStack();
758         this->cache = new std::stringstream(std::stringstream::in | std::stringstream::out);
759         this->errorlog = new std::stringstream(std::stringstream::in | std::stringstream::out);
760         this->readerror = Config->LoadConf(filename.c_str(),this->cache,this->errorlog);
761         if (!this->readerror)
762                 this->error = CONF_FILE_NOT_FOUND;
763 };
.fi
.PP
.SS "ConfigReader::~ConfigReader ()"
.PP
Default destructor. 
.PP
This method destroys the ConfigReader class.
.PP
Definition at line 746 of file modules.cpp.
.PP
References cache, and errorlog.
.PP
.nf
747 {
748         if (this->cache)
749                 delete this->cache;
750         if (this->errorlog)
751                 delete this->errorlog;
752 }
.fi
.PP
.SH "Member Function Documentation"
.PP 
.SS "void ConfigReader::DumpErrors (bool bail, \fBuserrec\fP * user)"
.PP
Dumps the list of errors in a config file to an output location. 
.PP
If bail is true, then the program will abort. If bail is false and user points to a valid user record, the error report will be spooled to the given user by means of NOTICE. if bool is false AND user is false, the error report will be spooled to all opers by means of a NOTICE to all opers.
.PP
Definition at line 834 of file modules.cpp.
.PP
References errorlog, connection::fd, userrec::nick, WriteOpers(), and WriteServ().
.PP
.nf
835 {
836         if (bail)
837         {
838                 printf('There were errors in your configuration:\n%s',errorlog->str().c_str());
839                 exit(0);
840         }
841         else
842         {
843                 char dataline[1024];
844                 if (user)
845                 {
846                         WriteServ(user->fd,'NOTICE %s :There were errors in the configuration file:',user->nick);
847                         while (!errorlog->eof())
848                         {
849                                 errorlog->getline(dataline,1024);
850                                 WriteServ(user->fd,'NOTICE %s :%s',user->nick,dataline);
851                         }
852                 }
853                 else
854                 {
855                         WriteOpers('There were errors in the configuration file:',user->nick);
856                         while (!errorlog->eof())
857                         {
858                                 errorlog->getline(dataline,1024);
859                                 WriteOpers(dataline);
860                         }
861                 }
862                 return;
863         }
864 }
.fi
.PP
.SS "int ConfigReader::Enumerate (\fBstd::string\fP tag)"
.PP
Counts the number of times a given tag appears in the config file. 
.PP
This method counts the number of times a tag appears in a config file, for use where there are several tags of the same kind, e.g. with opers and connect types. It can be used with the index value of \fBConfigReader::ReadValue\fP to loop through all copies of a multiple instance tag.
.PP
Definition at line 867 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumConf().
.PP
.nf
868 {
869         return Config->EnumConf(cache,tag.c_str());
870 }
.fi
.PP
.SS "int ConfigReader::EnumerateValues (\fBstd::string\fP tag, int index)"
.PP
Returns the number of items within a tag. 
.PP
For example if the tag was <test tag='blah' data='foo'> then this function would return 2. Spaces and newlines both qualify as valid seperators between values.
.PP
Definition at line 872 of file modules.cpp.
.PP
References cache, and ServerConfig::EnumValues().
.PP
.nf
873 {
874         return Config->EnumValues(cache, tag.c_str(), index);
875 }
.fi
.PP
.SS "long ConfigReader::GetError ()"
.PP
Returns the last error to occur. 
.PP
Valid errors can be found by looking in \fBmodules.h\fP. Any nonzero value indicates an error condition. A call to \fBGetError()\fP resets the error flag back to 0.
.PP
Definition at line 827 of file modules.cpp.
.PP
References error.
.PP
.nf
828 {
829         long olderr = this->error;
830         this->error = 0;
831         return olderr;
832 }
.fi
.PP
.SS "bool ConfigReader::ReadFlag (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a boolean value from the config file. 
.PP
This method retrieves a boolean value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. The values '1', 'yes' and 'true' in the config file count as true to ReadFlag, and any other value counts as false.
.PP
Definition at line 781 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
782 {
783         char val[MAXBUF];
784         char t[MAXBUF];
785         char n[MAXBUF];
786         strlcpy(t,tag.c_str(),MAXBUF);
787         strlcpy(n,name.c_str(),MAXBUF);
788         int res = Config->ReadConf(cache,t,n,index,val);
789         if (!res)
790         {
791                 this->error = CONF_VALUE_NOT_FOUND;
792                 return false;
793         }
794         std::string s = val;
795         return ((s == 'yes') || (s == 'YES') || (s == 'true') || (s == 'TRUE') || (s == '1'));
796 }
.fi
.PP
.SS "long ConfigReader::ReadInteger (\fBstd::string\fP tag, \fBstd::string\fP name, int index, bool needs_unsigned)"
.PP
Retrieves an integer value from the config file. 
.PP
This method retrieves an integer value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve. Any invalid integer values in the tag will cause the objects error value to be set, and any call to \fBGetError()\fP will return CONF_INVALID_NUMBER to be returned. needs_unsigned is set if the number must be unsigned. If a signed number is placed into a tag which is specified unsigned, 0 will be returned and \fBGetError()\fP will return CONF_NOT_UNSIGNED
.PP
Definition at line 798 of file modules.cpp.
.PP
References cache, CONF_NOT_A_NUMBER, CONF_NOT_UNSIGNED, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
799 {
800         char val[MAXBUF];
801         char t[MAXBUF];
802         char n[MAXBUF];
803         strlcpy(t,tag.c_str(),MAXBUF);
804         strlcpy(n,name.c_str(),MAXBUF);
805         int res = Config->ReadConf(cache,t,n,index,val);
806         if (!res)
807         {
808                 this->error = CONF_VALUE_NOT_FOUND;
809                 return 0;
810         }
811         for (unsigned int i = 0; i < strlen(val); i++)
812         {
813                 if (!isdigit(val[i]))
814                 {
815                         this->error = CONF_NOT_A_NUMBER;
816                         return 0;
817                 }
818         }
819         if ((needs_unsigned) && (atoi(val)<0))
820         {
821                 this->error = CONF_NOT_UNSIGNED;
822                 return 0;
823         }
824         return atoi(val);
825 }
.fi
.PP
.SS "\fBstd::string\fP ConfigReader::ReadValue (\fBstd::string\fP tag, \fBstd::string\fP name, int index)"
.PP
Retrieves a value from the config file. 
.PP
This method retrieves a value from the config file. Where multiple copies of the tag exist in the config file, index indicates which of the values to retrieve.
.PP
Definition at line 765 of file modules.cpp.
.PP
References cache, CONF_VALUE_NOT_FOUND, error, and ServerConfig::ReadConf().
.PP
.nf
766 {
767         char val[MAXBUF];
768         char t[MAXBUF];
769         char n[MAXBUF];
770         strlcpy(t,tag.c_str(),MAXBUF);
771         strlcpy(n,name.c_str(),MAXBUF);
772         int res = Config->ReadConf(cache,t,n,index,val);
773         if (!res)
774         {
775                 this->error = CONF_VALUE_NOT_FOUND;
776                 return '';
777         }
778         return val;
779 }
.fi
.PP
.SS "bool ConfigReader::Verify ()"
.PP
Returns true if a config file is valid. 
.PP
This method is partially implemented and will only return false if the config file does not exist or could not be opened.
.PP
Definition at line 877 of file modules.cpp.
.PP
References readerror.
.PP
.nf
878 {
879         return this->readerror;
880 }
.fi
.PP
.SH "Member Data Documentation"
.PP 
.SS "std::stringstream* \fBConfigReader::cache\fP\fC [protected]\fP"
.PP
The contents of the configuration file This protected member should never be accessed by a module (and cannot be accessed unless the core is changed). 
.PP
It will contain a pointer to the configuration file data with unneeded data (such as comments) stripped from it.
.PP
Definition at line 1558 of file modules.h.
.PP
Referenced by ConfigReader(), Enumerate(), EnumerateValues(), ReadFlag(), ReadInteger(), ReadValue(), and ~ConfigReader().
.SS "long \fBConfigReader::error\fP\fC [protected]\fP"
.PP
Definition at line 1563 of file modules.h.
.PP
Referenced by ConfigReader(), GetError(), ReadFlag(), ReadInteger(), and ReadValue().
.SS "std::stringstream* \fBConfigReader::errorlog\fP\fC [protected]\fP"
.PP
Definition at line 1559 of file modules.h.
.PP
Referenced by ConfigReader(), DumpErrors(), and ~ConfigReader().
.SS "bool \fBConfigReader::readerror\fP\fC [protected]\fP"
.PP
Used to store errors. 
.PP
Definition at line 1562 of file modules.h.
.PP
Referenced by ConfigReader(), and Verify().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
