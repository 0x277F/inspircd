.TH "Module" 3 "25 Mar 2005" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Module \- Base class for all InspIRCd modules This class is the base class for InspIRCd modules.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <modules.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBModule\fP ()"
.br
.RI "\fIDefault constructor creates a module class. \fP"
.ti -1c
.RI "virtual \fB~Module\fP ()"
.br
.RI "\fIDefault destructor destroys a module class. \fP"
.ti -1c
.RI "virtual \fBVersion\fP \fBGetVersion\fP ()"
.br
.RI "\fIReturns the version number of a Module. \fP"
.ti -1c
.RI "virtual void \fBOnUserConnect\fP (\fBuserrec\fP *user)"
.br
.RI "\fICalled when a user connects. \fP"
.ti -1c
.RI "virtual void \fBOnUserQuit\fP (\fBuserrec\fP *user)"
.br
.RI "\fICalled when a user quits. \fP"
.ti -1c
.RI "virtual void \fBOnUserJoin\fP (\fBuserrec\fP *user, \fBchanrec\fP *channel)"
.br
.RI "\fICalled when a user joins a channel. \fP"
.ti -1c
.RI "virtual void \fBOnUserPart\fP (\fBuserrec\fP *user, \fBchanrec\fP *channel)"
.br
.RI "\fICalled when a user parts a channel. \fP"
.ti -1c
.RI "virtual void \fBOnPacketTransmit\fP (char *p)"
.br
.RI "\fICalled before a packet is transmitted across the irc network between two irc servers. \fP"
.ti -1c
.RI "virtual void \fBOnPacketReceive\fP (char *p)"
.br
.RI "\fICalled after a packet is received from another irc server. \fP"
.ti -1c
.RI "virtual void \fBOnRehash\fP ()"
.br
.RI "\fICalled on rehash. \fP"
.ti -1c
.RI "virtual void \fBOnServerRaw\fP (std::string &raw, bool inbound, \fBuserrec\fP *user)"
.br
.RI "\fICalled when a raw command is transmitted or received. \fP"
.ti -1c
.RI "virtual int \fBOnExtendedMode\fP (\fBuserrec\fP *user, void *target, char modechar, int type, bool mode_on, \fBstring_list\fP &params)"
.br
.RI "\fICalled whenever an extended mode is to be processed. \fP"
.ti -1c
.RI "virtual int \fBOnUserPreJoin\fP (\fBuserrec\fP *user, \fBchanrec\fP *chan, const char *cname)"
.br
.RI "\fICalled whenever a user is about to join a channel, before any processing is done. \fP"
.ti -1c
.RI "virtual void \fBOnOper\fP (\fBuserrec\fP *user)"
.br
.RI "\fICalled whenever a user opers locally. \fP"
.ti -1c
.RI "virtual void \fBOnInfo\fP (\fBuserrec\fP *user)"
.br
.RI "\fICalled whenever a user types /INFO. \fP"
.ti -1c
.RI "virtual void \fBOnWhois\fP (\fBuserrec\fP *source, \fBuserrec\fP *dest)"
.br
.RI "\fICalled whenever a /WHOIS is performed on a local user. \fP"
.ti -1c
.RI "virtual int \fBOnUserPreInvite\fP (\fBuserrec\fP *source, \fBuserrec\fP *dest, \fBchanrec\fP *channel)"
.br
.RI "\fICalled whenever a user is about to invite another user into a channel, before any processing is done. \fP"
.ti -1c
.RI "virtual int \fBOnUserPreMessage\fP (\fBuserrec\fP *user, void *dest, int target_type, std::string &text)"
.br
.RI "\fICalled whenever a user is about to PRIVMSG A user or a channel, before any processing is done. \fP"
.ti -1c
.RI "virtual int \fBOnUserPreNotice\fP (\fBuserrec\fP *user, void *dest, int target_type, std::string &text)"
.br
.RI "\fICalled whenever a user is about to NOTICE A user or a channel, before any processing is done. \fP"
.ti -1c
.RI "virtual int \fBOnUserPreNick\fP (\fBuserrec\fP *user, std::string newnick)"
.br
.RI "\fICalled before any nickchange, local or remote. \fP"
.ti -1c
.RI "virtual int \fBOnAccessCheck\fP (\fBuserrec\fP *source, \fBuserrec\fP *dest, \fBchanrec\fP *channel, int access_type)"
.br
.RI "\fICalled before an action which requires a channel privilage check. \fP"
.ti -1c
.RI "virtual \fBstring_list\fP \fBOnUserSync\fP (\fBuserrec\fP *user)"
.br
.RI "\fICalled during a netburst to sync user data. \fP"
.ti -1c
.RI "virtual \fBstring_list\fP \fBOnChannelSync\fP (\fBchanrec\fP *chan)"
.br
.RI "\fICalled during a netburst to sync channel data. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for all InspIRCd modules This class is the base class for InspIRCd modules. 

All modules must inherit from this class, its methods will be called when irc server events occur. class inherited from module must be instantiated by the \fBModuleFactory\fP class (see relevent section) for the plugin to be initialised. 
.PP
Definition at line 126 of file modules.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Module::Module ()"
.PP
Default constructor creates a module class. Definition at line 297 of file modules.cpp.
.PP
.nf
297 { }
.fi
.SS "Module::~\fBModule\fP ()\fC [virtual]\fP"
.PP
Default destructor destroys a module class. Definition at line 298 of file modules.cpp.
.PP
.nf
298 { }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBVersion\fP Module::GetVersion ()\fC [virtual]\fP"
.PP
Returns the version number of a Module. The method should return a \fBVersion\fP object with its version information assigned via \fBVersion::Version\fPDefinition at line 309 of file modules.cpp.
.PP
.nf
309 { return Version(1,0,0,0); }
.fi
.SS "int Module::OnAccessCheck (\fBuserrec\fP * source, \fBuserrec\fP * dest, \fBchanrec\fP * channel, int access_type)\fC [virtual]\fP"
.PP
Called before an action which requires a channel privilage check. This function is called before many functions which check a users status on a channel, for example before opping a user, deopping a user, kicking a user, etc. There are several values for access_type which indicate for what reason access is being checked. These are:
.br

.br
 AC_KICK (0) - A user is being kicked
.br
 AC_DEOP (1) - a user is being deopped
.br
 AC_OP (2) - a user is being opped
.br
 AC_VOICE (3) - a user is being voiced
.br
 AC_DEVOICE (4) - a user is being devoiced
.br
 AC_HALFOP (5) - a user is being halfopped
.br
 AC_DEHALFOP (6) - a user is being dehalfopped
.br
 AC_INVITE (7) - a user is being invited
.br
 AC_GENERAL_MODE (8) - a user channel mode is being changed
.br

.br
 Upon returning from your function you must return either ACR_DEFAULT, to indicate the module wishes to do nothing, or ACR_DENY where approprate to deny the action, and ACR_ALLOW where appropriate to allow the action. Please note that in the case of some access checks (such as AC_GENERAL_MODE) access may be denied 'upstream' causing other checks such as AC_DEOP to not be reached. Be very careful with use of the AC_GENERAL_MODE type, as it may inadvertently override the behaviour of other modules. When the access_type is AC_GENERAL_MODE, the destination of the mode will be NULL (as it has not yet been determined).Definition at line 317 of file modules.cpp.
.PP
References ACR_DEFAULT.
.PP
.nf
317 { return ACR_DEFAULT; };
.fi
.SS "\fBstring_list\fP Module::OnChannelSync (\fBchanrec\fP * chan)\fC [virtual]\fP"
.PP
Called during a netburst to sync channel data. This is called during the netburst on a per-channel basis. You should use this call to up any special channel-related things which are implemented by your module, e.g. sending listmodes. You may return multiple commands in the string_list.Definition at line 319 of file modules.cpp.
.PP
References string_list.
.PP
.nf
319 { string_list empty; return empty; }
.fi
.SS "int Module::OnExtendedMode (\fBuserrec\fP * user, void * target, char modechar, int type, bool mode_on, \fBstring_list\fP & params)\fC [virtual]\fP"
.PP
Called whenever an extended mode is to be processed. The type parameter is MT_SERVER, MT_CLIENT or MT_CHANNEL, dependent on where the mode is being changed. mode_on is set when the mode is being set, in which case params contains a list of parameters for the mode as strings. If mode_on is false, the mode is being removed, and parameters may contain the parameters for the mode, dependent on wether they were defined when a mode handler was set up with \fBServer::AddExtendedMode\fP If the mode is a channel mode, target is a chanrec*, and if it is a user mode, target is a userrec*. You must cast this value yourself to make use of it.Definition at line 308 of file modules.cpp.
.PP
.nf
308 { return false; }
.fi
.SS "void Module::OnInfo (\fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called whenever a user types /INFO. The userrec will contain the information of the user who typed the command. Modules may use this method to output their own credits in /INFO (which is the ircd's version of an about box). It is purposefully not possible to modify any info that has already been output, or halt the list. You must write a 371 numeric to the user, containing your info in the following format:
.PP
<nick> :information hereDefinition at line 311 of file modules.cpp.
.PP
.nf
311 { };
.fi
.SS "void Module::OnOper (\fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called whenever a user opers locally. The userrec will contain the oper mode 'o' as this function is called after any modifications are made to the user's structure by the core.Definition at line 310 of file modules.cpp.
.PP
.nf
310 { };
.fi
.SS "void Module::OnPacketReceive (char * p)\fC [virtual]\fP"
.PP
Called after a packet is received from another irc server. The packet is represented as a char*, as it should be regarded as a buffer, and not a string. This allows you to easily represent it in the correct ways to implement encryption, compression, digital signatures and anything else you may want to add. This should be regarded as a pre-processor and will be called immediately after the packet is received but before any other operations with the core of the ircd.Definition at line 304 of file modules.cpp.
.PP
.nf
304 { }
.fi
.SS "void Module::OnPacketTransmit (char * p)\fC [virtual]\fP"
.PP
Called before a packet is transmitted across the irc network between two irc servers. The packet is represented as a char*, as it should be regarded as a buffer, and not a string. This allows you to easily represent it in the correct ways to implement encryption, compression, digital signatures and anything else you may want to add. This should be regarded as a pre-processor and will be called before ANY other operations within the ircd core program.Definition at line 303 of file modules.cpp.
.PP
.nf
303 { }
.fi
.SS "void Module::OnRehash ()\fC [virtual]\fP"
.PP
Called on rehash. This method is called prior to a /REHASH or when a SIGHUP is received from the operating system. You should use it to reload any files so that your module keeps in step with the rest of the application.Definition at line 305 of file modules.cpp.
.PP
.nf
305 { }
.fi
.SS "void Module::OnServerRaw (std::string & raw, bool inbound, \fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called when a raw command is transmitted or received. This method is the lowest level of handler available to a module. It will be called with raw data which is passing through a connected socket. If you wish, you may munge this data by changing the string parameter 'raw'. If you do this, after your function exits it will immediately be cut down to 510 characters plus a carriage return and linefeed. For INBOUND messages only (where inbound is set to true) the value of user will be the userrec of the connection sending the data. This is not possible for outbound data because the data may be being routed to multiple targets.Definition at line 306 of file modules.cpp.
.PP
.nf
306 { }
.fi
.SS "void Module::OnUserConnect (\fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called when a user connects. The details of the connecting user are available to you in the parameter userrec *userDefinition at line 299 of file modules.cpp.
.PP
.nf
299 { }
.fi
.SS "void Module::OnUserJoin (\fBuserrec\fP * user, \fBchanrec\fP * channel)\fC [virtual]\fP"
.PP
Called when a user joins a channel. The details of the joining user are available to you in the parameter userrec *user, and the details of the channel they have joined is available in the variable chanrec *channelDefinition at line 301 of file modules.cpp.
.PP
.nf
301 { }
.fi
.SS "void Module::OnUserPart (\fBuserrec\fP * user, \fBchanrec\fP * channel)\fC [virtual]\fP"
.PP
Called when a user parts a channel. The details of the leaving user are available to you in the parameter userrec *user, and the details of the channel they have left is available in the variable chanrec *channelDefinition at line 302 of file modules.cpp.
.PP
.nf
302 { }
.fi
.SS "int Module::OnUserPreInvite (\fBuserrec\fP * source, \fBuserrec\fP * dest, \fBchanrec\fP * channel)\fC [virtual]\fP"
.PP
Called whenever a user is about to invite another user into a channel, before any processing is done. Returning 1 from this function stops the process immediately, causing no output to be sent to the user by the core. If you do this you must produce your own numerics, notices etc. This is useful for modules which may want to filter invites to channels.Definition at line 313 of file modules.cpp.
.PP
.nf
313 { return 0; };
.fi
.SS "int Module::OnUserPreJoin (\fBuserrec\fP * user, \fBchanrec\fP * chan, const char * cname)\fC [virtual]\fP"
.PP
Called whenever a user is about to join a channel, before any processing is done. Returning a value of 1 from this function stops the process immediately, causing no output to be sent to the user by the core. If you do this you must produce your own numerics, notices etc. This is useful for modules which may want to mimic +b, +k, +l etc. Returning -1 from this function forces the join to be allowed, bypassing restrictions such as banlists, invite, keys etc.
.PP
IMPORTANT NOTE!
.PP
If the user joins a NEW channel which does not exist yet, OnUserPreJoin will be called BEFORE the channel record is created. This will cause chanrec* chan to be NULL. There is very little you can do in form of processing on the actual channel record at this point, however the channel NAME will still be passed in char* cname, so that you could for example implement a channel blacklist or whitelist, etc.Definition at line 307 of file modules.cpp.
.PP
.nf
307 { return 0; }
.fi
.SS "int Module::OnUserPreMessage (\fBuserrec\fP * user, void * dest, int target_type, std::string & text)\fC [virtual]\fP"
.PP
Called whenever a user is about to PRIVMSG A user or a channel, before any processing is done. Returning any nonzero value from this function stops the process immediately, causing no output to be sent to the user by the core. If you do this you must produce your own numerics, notices etc. This is useful for modules which may want to filter or redirect messages. target_type can be one of TYPE_USER or TYPE_CHANNEL. If the target_type value is a user, you must cast dest to a userrec* otherwise you must cast it to a chanrec*, this is the details of where the message is destined to be sent.Definition at line 314 of file modules.cpp.
.PP
.nf
314 { return 0; };
.fi
.SS "int Module::OnUserPreNick (\fBuserrec\fP * user, std::string newnick)\fC [virtual]\fP"
.PP
Called before any nickchange, local or remote. This can be used to implement Q-lines etc. Please note that although you can see remote nickchanges through this function, you should NOT make any changes to the userrec if the user is a remote user as this may cause a desnyc. check user->server before taking any action (including returning nonzero from the method). If your method returns nonzero, the nickchange is silently forbidden, and it is down to your module to generate some meaninful output. You may alter the message text as you wish before relinquishing control to the next module in the chain, and if no other modules block the text this altered form of the text will be sent out to the user and possibly to other servers.Definition at line 316 of file modules.cpp.
.PP
.nf
316 { return 0; };
.fi
.SS "int Module::OnUserPreNotice (\fBuserrec\fP * user, void * dest, int target_type, std::string & text)\fC [virtual]\fP"
.PP
Called whenever a user is about to NOTICE A user or a channel, before any processing is done. Returning any nonzero value from this function stops the process immediately, causing no output to be sent to the user by the core. If you do this you must produce your own numerics, notices etc. This is useful for modules which may want to filter or redirect messages. target_type can be one of TYPE_USER or TYPE_CHANNEL. If the target_type value is a user, you must cast dest to a userrec* otherwise you must cast it to a chanrec*, this is the details of where the message is destined to be sent. You may alter the message text as you wish before relinquishing control to the next module in the chain, and if no other modules block the text this altered form of the text will be sent out to the user and possibly to other servers.Definition at line 315 of file modules.cpp.
.PP
.nf
315 { return 0; };
.fi
.SS "void Module::OnUserQuit (\fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called when a user quits. The details of the exiting user are available to you in the parameter userrec *userDefinition at line 300 of file modules.cpp.
.PP
.nf
300 { }
.fi
.SS "\fBstring_list\fP Module::OnUserSync (\fBuserrec\fP * user)\fC [virtual]\fP"
.PP
Called during a netburst to sync user data. This is called during the netburst on a per-user basis. You should use this call to up any special user-related things which are implemented by your module, e.g. sending listmodes. You may return multiple commands in the string_list.Definition at line 318 of file modules.cpp.
.PP
References string_list.
.PP
.nf
318 { string_list empty; return empty; }
.fi
.SS "void Module::OnWhois (\fBuserrec\fP * source, \fBuserrec\fP * dest)\fC [virtual]\fP"
.PP
Called whenever a /WHOIS is performed on a local user. The source parameter contains the details of the user who issued the WHOIS command, and the dest parameter contains the information of the user they are whoising.Definition at line 312 of file modules.cpp.
.PP
.nf
312 { };
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
