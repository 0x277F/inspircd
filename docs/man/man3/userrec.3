.TH "userrec" 3 "25 Mar 2005" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
userrec \- Holds all information about a user This class stores all information about a user connected to the irc server.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <users.h>\fP
.PP
Inherits \fBconnection\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBuserrec\fP ()"
.br
.ti -1c
.RI "virtual \fB~userrec\fP ()"
.br
.ti -1c
.RI "virtual char * \fBGetFullHost\fP ()"
.br
.RI "\fIReturns the full displayed host of the user This member function returns the hostname of the user as seen by other users on the server, in nick!identhost form. \fP"
.ti -1c
.RI "virtual char * \fBGetFullRealHost\fP ()"
.br
.RI "\fIReturns the full real host of the user This member function returns the hostname of the user as seen by other users on the server, in nick!identhost form. \fP"
.ti -1c
.RI "virtual bool \fBIsInvited\fP (char *channel)"
.br
.RI "\fIReturns true if a user is invited to a channel. \fP"
.ti -1c
.RI "virtual void \fBInviteTo\fP (char *channel)"
.br
.RI "\fIAdds a channel to a users invite list (invites them to a channel). \fP"
.ti -1c
.RI "virtual void \fBRemoveInvite\fP (char *channel)"
.br
.RI "\fIRemoves a channel from a users invite list. \fP"
.ti -1c
.RI "bool \fBHasPermission\fP (char *command)"
.br
.RI "\fIReturns true or false for if a user can execute a privilaged oper command. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "char \fBnick\fP [NICKMAX]"
.br
.RI "\fIThe users nickname. \fP"
.ti -1c
.RI "char \fBident\fP [64]"
.br
.RI "\fIThe users ident reply. \fP"
.ti -1c
.RI "char \fBdhost\fP [256]"
.br
.RI "\fIThe host displayed to non-opers (used for cloaking etc). \fP"
.ti -1c
.RI "char \fBfullname\fP [128]"
.br
.RI "\fIThe users full name. \fP"
.ti -1c
.RI "char \fBmodes\fP [MAXBUF]"
.br
.RI "\fIThe user's mode string. \fP"
.ti -1c
.RI "\fBucrec\fP \fBchans\fP [MAXCHANS]"
.br
.ti -1c
.RI "char \fBserver\fP [256]"
.br
.RI "\fIThe server the user is connected to. \fP"
.ti -1c
.RI "char \fBawaymsg\fP [512]"
.br
.RI "\fIThe user's away message. \fP"
.ti -1c
.RI "char \fBresult\fP [256]"
.br
.RI "\fIStores the result of the last GetFullHost or GetRealHost call. \fP"
.ti -1c
.RI "int \fBflood\fP"
.br
.RI "\fINumber of lines the user can place into the buffer (up to the global NetBufferSize bytes) before they are disconnected for excess flood. \fP"
.ti -1c
.RI "unsigned long \fBtimeout\fP"
.br
.RI "\fINumber of seconds this user is given to send USER/NICK If they do not send their details in this time limit they will be disconnected. \fP"
.ti -1c
.RI "char \fBoper\fP [NICKMAX]"
.br
.RI "\fIThe oper type they logged in as, if they are an oper. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBInvitedList\fP \fBinvites\fP"
.br
.RI "\fIA list of channels the user has a pending invite to. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Holds all information about a user This class stores all information about a user connected to the irc server. 

Everything about a connection is stored here primarily, from the user's socket ID (file descriptor) through to the user's nickname and hostname. Use the Find method of the server class to locate a specific user by nickname. 
.PP
Definition at line 89 of file users.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "userrec::userrec ()"
.PP
Definition at line 25 of file users.cpp.
.PP
References awaymsg, connection::bytes_in, connection::bytes_out, ucrec::channel, chans, connection::cmds_in, connection::cmds_out, dhost, connection::fd, flood, fullname, connection::haspassed, connection::host, ident, connection::idle_lastmsg, connection::inbuf, invites, connection::ip, connection::lastping, modes, nick, connection::nping, connection::port, connection::registered, result, server, connection::signon, timeout, and ucrec::uc_modes.
.PP
.nf
26 {
27         // the PROPER way to do it, AVOID bzero at *ALL* costs
28         strcpy(nick,'');
29         strcpy(ip,'127.0.0.1');
30         timeout = 0;
31         strcpy(ident,'');
32         strcpy(host,'');
33         strcpy(dhost,'');
34         strcpy(fullname,'');
35         strcpy(modes,'');
36         strcpy(inbuf,'');
37         strcpy(server,'');
38         strcpy(awaymsg,'');
39         fd = lastping = signon = idle_lastmsg = nping = registered = 0;
40         flood = port = bytes_in = bytes_out = cmds_in = cmds_out = 0;
41         haspassed = false;
42         strcpy(result,'');
43         for (int i = 0; i < MAXCHANS; i++)
44         {
45                 this->chans[i].channel = NULL;
46                 this->chans[i].uc_modes = 0;
47         }
48         invites.clear();
49 }
.fi
.SS "virtual userrec::~\fBuserrec\fP ()\fC [inline, virtual]\fP"
.PP
Definition at line 160 of file users.h.
.PP
.nf
160 {  }
.fi
.SH "Member Function Documentation"
.PP 
.SS "char * userrec::GetFullHost ()\fC [virtual]\fP"
.PP
Returns the full displayed host of the user This member function returns the hostname of the user as seen by other users on the server, in nick!identhost form. Definition at line 53 of file users.cpp.
.PP
References dhost, ident, nick, and result.
.PP
.nf
54 {
55         snprintf(result,MAXBUF,'%s!%s@%s',nick,ident,dhost);
56         return result;
57 }
.fi
.SS "char * userrec::GetFullRealHost ()\fC [virtual]\fP"
.PP
Returns the full real host of the user This member function returns the hostname of the user as seen by other users on the server, in nick!identhost form. If any form of hostname cloaking is in operation, e.g. through a module, then this method will ignore it and return the true hostname.Definition at line 60 of file users.cpp.
.PP
References connection::host, ident, nick, and result.
.PP
.nf
61 {
62         snprintf(result,MAXBUF,'%s!%s@%s',nick,ident,host);
63         return result;
64 }
.fi
.SS "bool userrec::HasPermission (char * command)"
.PP
Returns true or false for if a user can execute a privilaged oper command. This is done by looking up their oper type from \fBuserrec::oper\fP, then referencing this to their oper classes and checking the commands they can execute.Definition at line 109 of file users.cpp.
.PP
References config_f, and DEBUG.
.PP
.nf
110 {
111         char TypeName[MAXBUF],Classes[MAXBUF],ClassName[MAXBUF],CommandList[MAXBUF];
112         char* myclass;
113         char* mycmd;
114         char* savept;
115         char* savept2;
116         
117         // are they even an oper at all?
118         if (strchr(this->modes,'o'))
119         {
120                 log(DEBUG,'*** HasPermission: %s is an oper',this->nick);
121                 for (int j =0; j < ConfValueEnum('type',&config_f); j++)
122                 {
123                         ConfValue('type','name',j,TypeName,&config_f);
124                         if (!strcmp(TypeName,this->oper))
125                         {
126                                 log(DEBUG,'*** HasPermission: %s is an oper of type '%s'',this->nick,this->oper);
127                                 ConfValue('type','classes',j,Classes,&config_f);
128                                 char* myclass = strtok_r(Classes,' ',&savept);
129                                 while (myclass)
130                                 {
131                                         log(DEBUG,'*** HasPermission: checking classtype '%s'',myclass);
132                                         for (int k =0; k < ConfValueEnum('class',&config_f); k++)
133                                         {
134                                                 ConfValue('class','name',k,ClassName,&config_f);
135                                                 if (!strcmp(ClassName,myclass))
136                                                 {
137                                                         ConfValue('class','commands',k,CommandList,&config_f);
138                                                         log(DEBUG,'*** HasPermission: found class named %s with commands: '%s'',ClassName,CommandList);
139                                                         
140                                                         
141                                                         mycmd = strtok_r(CommandList,' ',&savept2);
142                                                         while (mycmd)
143                                                         {
144                                                                 if (!strcasecmp(mycmd,command))
145                                                                 {
146                                                                         log(DEBUG,'*** Command %s found, returning true',command);
147                                                                         return true;
148                                                                 }
149                                                                 mycmd = strtok_r(NULL,' ',&savept2);
150                                                         }
151                                                 }
152                                         }
153                                         myclass = strtok_r(NULL,' ',&savept);
154                                 }
155                         }
156                 }
157         }
158         return false;
159 }
.fi
.SS "void userrec::InviteTo (char * channel)\fC [virtual]\fP"
.PP
Adds a channel to a users invite list (invites them to a channel). Definition at line 80 of file users.cpp.
.PP
References Invited::channel, and invites.
.PP
.nf
81 {
82         Invited i;
83         strlcpy(i.channel,channel,CHANMAX);
84         invites.push_back(i);
85 }
.fi
.SS "bool userrec::IsInvited (char * channel)\fC [virtual]\fP"
.PP
Returns true if a user is invited to a channel. Definition at line 66 of file users.cpp.
.PP
References invites.
.PP
.nf
67 {
68         for (InvitedList::iterator i = invites.begin(); i != invites.end(); i++)
69         {
70                 if (i->channel) {
71                         if (!strcasecmp(i->channel,channel))
72                         {
73                                 return true;
74                         }
75                 }
76         }
77         return false;
78 }
.fi
.SS "void userrec::RemoveInvite (char * channel)\fC [virtual]\fP"
.PP
Removes a channel from a users invite list. This member function is called on successfully joining an invite only channel to which the user has previously been invited, to clear the invitation.Definition at line 87 of file users.cpp.
.PP
References DEBUG, and invites.
.PP
.nf
88 {
89         log(DEBUG,'Removing invites');
90         if (channel)
91         {
92                 if (invites.size())
93                 {
94                         for (InvitedList::iterator i = invites.begin(); i != invites.end(); i++)
95                         {
96                                 if (i->channel)
97                                 {
98                                         if (!strcasecmp(i->channel,channel))
99                                         {
100                                                 invites.erase(i);
101                                                 return;
102                                         }
103                                 }
104                         }
105                 }
106         }
107 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "char \fBuserrec::awaymsg\fP[512]"
.PP
The user's away message. If this string is empty, the user is not marked as away.Definition at line 132 of file users.h.
.PP
Referenced by userrec().
.SS "\fBucrec\fP \fBuserrec::chans\fP[MAXCHANS]"
.PP
Definition at line 123 of file users.h.
.PP
Referenced by userrec().
.SS "char \fBuserrec::dhost\fP[256]"
.PP
The host displayed to non-opers (used for cloaking etc). This usually matches the value of \fBuserrec::host\fP.Definition at line 111 of file users.h.
.PP
Referenced by GetFullHost(), and userrec().
.SS "int \fBuserrec::flood\fP"
.PP
Number of lines the user can place into the buffer (up to the global NetBufferSize bytes) before they are disconnected for excess flood. Definition at line 143 of file users.h.
.PP
Referenced by userrec().
.SS "char \fBuserrec::fullname\fP[128]"
.PP
The users full name. Definition at line 115 of file users.h.
.PP
Referenced by userrec().
.SS "char \fBuserrec::ident\fP[64]"
.PP
The users ident reply. Definition at line 106 of file users.h.
.PP
Referenced by GetFullHost(), GetFullRealHost(), and userrec().
.SS "\fBInvitedList\fP \fBuserrec::invites\fP\fC [private]\fP"
.PP
A list of channels the user has a pending invite to. Definition at line 95 of file users.h.
.PP
Referenced by InviteTo(), IsInvited(), RemoveInvite(), and userrec().
.SS "char \fBuserrec::modes\fP[MAXBUF]"
.PP
The user's mode string. This may contain any of the following RFC characters: o, w, s, i Your module may define other mode characters as it sees fit.Definition at line 121 of file users.h.
.PP
Referenced by userrec().
.SS "char \fBuserrec::nick\fP[NICKMAX]"
.PP
The users nickname. An invalid nickname indicates an unregistered connection prior to the NICK command.Definition at line 102 of file users.h.
.PP
Referenced by ConfigReader::DumpErrors(), GetFullHost(), GetFullRealHost(), Server::QuitUser(), and userrec().
.SS "char \fBuserrec::oper\fP[NICKMAX]"
.PP
The oper type they logged in as, if they are an oper. This is used to check permissions in operclasses, so that we can say 'yay' or 'nay' to any commands they issue. The value of this is the value of a valid 'type name=' tag.Definition at line 156 of file users.h.
.SS "char \fBuserrec::result\fP[256]"
.PP
Stores the result of the last GetFullHost or GetRealHost call. You may use this to increase the speed of use of this class.Definition at line 137 of file users.h.
.PP
Referenced by GetFullHost(), GetFullRealHost(), and userrec().
.SS "char \fBuserrec::server\fP[256]"
.PP
The server the user is connected to. Definition at line 127 of file users.h.
.PP
Referenced by userrec().
.SS "unsigned long \fBuserrec::timeout\fP"
.PP
Number of seconds this user is given to send USER/NICK If they do not send their details in this time limit they will be disconnected. Definition at line 149 of file users.h.
.PP
Referenced by userrec().

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
