.TH "Extensible" 3 "12 Dec 2005" "Version 1.0Betareleases" "InspIRCd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Extensible \- class Extensible is the parent class of many classes such as userrec and chanrec.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <base.h>\fP
.PP
Inherits \fBclassbase\fP.
.PP
Inherited by \fBchanrec\fP, \fBcommand_t\fP, and \fBconnection\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBExtend\fP (\fBstd::string\fP key, char *p)"
.br
.RI "\fIExtend an Extensible class. \fP"
.ti -1c
.RI "bool \fBShrink\fP (\fBstd::string\fP key)"
.br
.RI "\fIShrink an Extensible class. \fP"
.ti -1c
.RI "char * \fBGetExt\fP (\fBstd::string\fP key)"
.br
.RI "\fIGet an extension item. \fP"
.ti -1c
.RI "void \fBGetExtList\fP (std::deque< \fBstd::string\fP > &\fBlist\fP)"
.br
.RI "\fIGet a list of all extension items names. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::map< \fBstd::string\fP, char * > \fBExtension_Items\fP"
.br
.RI "\fIPrivate data store. \fP"
.in -1c
.SH "Detailed Description"
.PP 
class Extensible is the parent class of many classes such as userrec and chanrec. 

class Extensible implements a system which allows modules to 'extend' the class by attaching data within a map associated with the object. In this way modules can store their own custom information within user objects, channel objects and server objects, without breaking other modules (this is more sensible than using a flags variable, and each module defining bits within the flag as 'theirs' as it is less prone to conflict and supports arbitary data storage).
.PP
Definition at line 51 of file base.h.
.SH "Member Function Documentation"
.PP 
.SS "bool Extensible::Extend (\fBstd::string\fP key, char * p)"
.PP
Extend an Extensible class. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key parameter is an arbitary string which identifies the extension data 
.br
\fIp\fP This parameter is a pointer to any data you wish to associate with the object
.RE
.PP
You must provide a key to store the data as, and a void* to the data (typedef VoidPointer) The data will be inserted into the map. If the data already exists, you may not insert it twice, \fBExtensible::Extend\fP will return false in this case.
.PP
\fBReturns:\fP
.RS 4
Returns true on success, false if otherwise
.RE
.PP

.SS "char* Extensible::GetExt (\fBstd::string\fP key)"
.PP
Get an extension item. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key parameter is an arbitary string which identifies the extension data
.RE
.PP
\fBReturns:\fP
.RS 4
If you provide a non-existent key name, the function returns NULL, otherwise a pointer to the item referenced by the key is returned.
.RE
.PP

.SS "void Extensible::GetExtList (std::deque< \fBstd::string\fP > & list)"
.PP
Get a list of all extension items names. 
.PP
\fBParameters:\fP
.RS 4
\fIlist\fP A deque of strings to receive the list
.RE
.PP
\fBReturns:\fP
.RS 4
This function writes a list of all extension items stored in this object by name into the given deque and returns void.
.RE
.PP

.SS "bool Extensible::Shrink (\fBstd::string\fP key)"
.PP
Shrink an Extensible class. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key parameter is an arbitary string which identifies the extension data
.RE
.PP
You must provide a key name. The given key name will be removed from the classes data. If you provide a nonexistent key (case is important) then the function will return false.
.PP
\fBReturns:\fP
.RS 4
Returns true on success.
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "std::map<\fBstd::string\fP,char*> \fBExtensible::Extension_Items\fP\fC [private]\fP"
.PP
Private data store. 
.PP
Definition at line 55 of file base.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for InspIRCd from the source code.
